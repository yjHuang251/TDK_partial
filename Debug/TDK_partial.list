
TDK_partial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003834  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  08003a0c  08003a0c  00013a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003dec  08003dec  000200c0  2**0
                  CONTENTS
  4 .ARM          00000000  08003dec  08003dec  000200c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003dec  08003dec  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003dec  08003dec  00013dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003df4  08003df4  00013df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  08003df8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  200000c0  08003eb8  000200c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  08003eb8  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b75  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002129  00000000  00000000  00030c65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  00032d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf0  00000000  00000000  00033a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020e01  00000000  00000000  00034658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ddc9  00000000  00000000  00055459  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c90c1  00000000  00000000  00063222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012c2e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038cc  00000000  00000000  0012c334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000c0 	.word	0x200000c0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080039f4 	.word	0x080039f4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000c4 	.word	0x200000c4
 8000214:	080039f4 	.word	0x080039f4

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	; 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	; 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__gedf2>:
 80007e4:	f04f 3cff 	mov.w	ip, #4294967295
 80007e8:	e006      	b.n	80007f8 <__cmpdf2+0x4>
 80007ea:	bf00      	nop

080007ec <__ledf2>:
 80007ec:	f04f 0c01 	mov.w	ip, #1
 80007f0:	e002      	b.n	80007f8 <__cmpdf2+0x4>
 80007f2:	bf00      	nop

080007f4 <__cmpdf2>:
 80007f4:	f04f 0c01 	mov.w	ip, #1
 80007f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000800:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000804:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800080e:	d01b      	beq.n	8000848 <__cmpdf2+0x54>
 8000810:	b001      	add	sp, #4
 8000812:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000816:	bf0c      	ite	eq
 8000818:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800081c:	ea91 0f03 	teqne	r1, r3
 8000820:	bf02      	ittt	eq
 8000822:	ea90 0f02 	teqeq	r0, r2
 8000826:	2000      	moveq	r0, #0
 8000828:	4770      	bxeq	lr
 800082a:	f110 0f00 	cmn.w	r0, #0
 800082e:	ea91 0f03 	teq	r1, r3
 8000832:	bf58      	it	pl
 8000834:	4299      	cmppl	r1, r3
 8000836:	bf08      	it	eq
 8000838:	4290      	cmpeq	r0, r2
 800083a:	bf2c      	ite	cs
 800083c:	17d8      	asrcs	r0, r3, #31
 800083e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000842:	f040 0001 	orr.w	r0, r0, #1
 8000846:	4770      	bx	lr
 8000848:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800084c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000850:	d102      	bne.n	8000858 <__cmpdf2+0x64>
 8000852:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000856:	d107      	bne.n	8000868 <__cmpdf2+0x74>
 8000858:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800085c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000860:	d1d6      	bne.n	8000810 <__cmpdf2+0x1c>
 8000862:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000866:	d0d3      	beq.n	8000810 <__cmpdf2+0x1c>
 8000868:	f85d 0b04 	ldr.w	r0, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop

08000870 <__aeabi_cdrcmple>:
 8000870:	4684      	mov	ip, r0
 8000872:	4610      	mov	r0, r2
 8000874:	4662      	mov	r2, ip
 8000876:	468c      	mov	ip, r1
 8000878:	4619      	mov	r1, r3
 800087a:	4663      	mov	r3, ip
 800087c:	e000      	b.n	8000880 <__aeabi_cdcmpeq>
 800087e:	bf00      	nop

08000880 <__aeabi_cdcmpeq>:
 8000880:	b501      	push	{r0, lr}
 8000882:	f7ff ffb7 	bl	80007f4 <__cmpdf2>
 8000886:	2800      	cmp	r0, #0
 8000888:	bf48      	it	mi
 800088a:	f110 0f00 	cmnmi.w	r0, #0
 800088e:	bd01      	pop	{r0, pc}

08000890 <__aeabi_dcmpeq>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff fff4 	bl	8000880 <__aeabi_cdcmpeq>
 8000898:	bf0c      	ite	eq
 800089a:	2001      	moveq	r0, #1
 800089c:	2000      	movne	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_dcmplt>:
 80008a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a8:	f7ff ffea 	bl	8000880 <__aeabi_cdcmpeq>
 80008ac:	bf34      	ite	cc
 80008ae:	2001      	movcc	r0, #1
 80008b0:	2000      	movcs	r0, #0
 80008b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008b6:	bf00      	nop

080008b8 <__aeabi_dcmple>:
 80008b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008bc:	f7ff ffe0 	bl	8000880 <__aeabi_cdcmpeq>
 80008c0:	bf94      	ite	ls
 80008c2:	2001      	movls	r0, #1
 80008c4:	2000      	movhi	r0, #0
 80008c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ca:	bf00      	nop

080008cc <__aeabi_dcmpge>:
 80008cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008d0:	f7ff ffce 	bl	8000870 <__aeabi_cdrcmple>
 80008d4:	bf94      	ite	ls
 80008d6:	2001      	movls	r0, #1
 80008d8:	2000      	movhi	r0, #0
 80008da:	f85d fb08 	ldr.w	pc, [sp], #8
 80008de:	bf00      	nop

080008e0 <__aeabi_dcmpgt>:
 80008e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008e4:	f7ff ffc4 	bl	8000870 <__aeabi_cdrcmple>
 80008e8:	bf34      	ite	cc
 80008ea:	2001      	movcc	r0, #1
 80008ec:	2000      	movcs	r0, #0
 80008ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80008f2:	bf00      	nop

080008f4 <__aeabi_d2f>:
 80008f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008fc:	bf24      	itt	cs
 80008fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000902:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000906:	d90d      	bls.n	8000924 <__aeabi_d2f+0x30>
 8000908:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800090c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000910:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000914:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000918:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800091c:	bf08      	it	eq
 800091e:	f020 0001 	biceq.w	r0, r0, #1
 8000922:	4770      	bx	lr
 8000924:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000928:	d121      	bne.n	800096e <__aeabi_d2f+0x7a>
 800092a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800092e:	bfbc      	itt	lt
 8000930:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000934:	4770      	bxlt	lr
 8000936:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800093e:	f1c2 0218 	rsb	r2, r2, #24
 8000942:	f1c2 0c20 	rsb	ip, r2, #32
 8000946:	fa10 f30c 	lsls.w	r3, r0, ip
 800094a:	fa20 f002 	lsr.w	r0, r0, r2
 800094e:	bf18      	it	ne
 8000950:	f040 0001 	orrne.w	r0, r0, #1
 8000954:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000958:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800095c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000960:	ea40 000c 	orr.w	r0, r0, ip
 8000964:	fa23 f302 	lsr.w	r3, r3, r2
 8000968:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800096c:	e7cc      	b.n	8000908 <__aeabi_d2f+0x14>
 800096e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000972:	d107      	bne.n	8000984 <__aeabi_d2f+0x90>
 8000974:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000978:	bf1e      	ittt	ne
 800097a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800097e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000982:	4770      	bxne	lr
 8000984:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000988:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800098c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop

08000994 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	ed87 0a01 	vstr	s0, [r7, #4]
 800099e:	ed97 0a01 	vldr	s0, [r7, #4]
 80009a2:	f002 fa5b 	bl	8002e5c <cosf>
 80009a6:	eef0 7a40 	vmov.f32	s15, s0
 80009aa:	eeb0 0a67 	vmov.f32	s0, s15
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	ed87 0a01 	vstr	s0, [r7, #4]
 80009be:	ed97 0a01 	vldr	s0, [r7, #4]
 80009c2:	f002 fa8f 	bl	8002ee4 <sinf>
 80009c6:	eef0 7a40 	vmov.f32	s15, s0
 80009ca:	eeb0 0a67 	vmov.f32	s0, s15
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	0000      	movs	r0, r0
	...

080009d8 <_ZN8localize14delta_x_updateEff>:
	last_spd=0;
	last_omega=0;
	line=0;
}

float localize::delta_x_update(float spd,float omega){
 80009d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80009dc:	ed2d 8b02 	vpush	{d8}
 80009e0:	b084      	sub	sp, #16
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	60f8      	str	r0, [r7, #12]
 80009e6:	ed87 0a02 	vstr	s0, [r7, #8]
 80009ea:	edc7 0a01 	vstr	s1, [r7, #4]
	if(omega<0.001){
 80009ee:	6878      	ldr	r0, [r7, #4]
 80009f0:	f7ff fea0 	bl	8000734 <__aeabi_f2d>
 80009f4:	a342      	add	r3, pc, #264	; (adr r3, 8000b00 <_ZN8localize14delta_x_updateEff+0x128>)
 80009f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009fa:	f7ff ff53 	bl	80008a4 <__aeabi_dcmplt>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d02f      	beq.n	8000a64 <_ZN8localize14delta_x_updateEff+0x8c>
		delta_x=delta_x+(spd+last_spd)*0.001/*1000Hz*/*0.5;
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff fe93 	bl	8000734 <__aeabi_f2d>
 8000a0e:	4604      	mov	r4, r0
 8000a10:	460d      	mov	r5, r1
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	ed93 7a04 	vldr	s14, [r3, #16]
 8000a18:	edd7 7a02 	vldr	s15, [r7, #8]
 8000a1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a20:	ee17 0a90 	vmov	r0, s15
 8000a24:	f7ff fe86 	bl	8000734 <__aeabi_f2d>
 8000a28:	a335      	add	r3, pc, #212	; (adr r3, 8000b00 <_ZN8localize14delta_x_updateEff+0x128>)
 8000a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a2e:	f7ff fbf3 	bl	8000218 <__aeabi_dmul>
 8000a32:	4602      	mov	r2, r0
 8000a34:	460b      	mov	r3, r1
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	f04f 0200 	mov.w	r2, #0
 8000a3e:	4b32      	ldr	r3, [pc, #200]	; (8000b08 <_ZN8localize14delta_x_updateEff+0x130>)
 8000a40:	f7ff fbea 	bl	8000218 <__aeabi_dmul>
 8000a44:	4602      	mov	r2, r0
 8000a46:	460b      	mov	r3, r1
 8000a48:	4620      	mov	r0, r4
 8000a4a:	4629      	mov	r1, r5
 8000a4c:	f7ff fd14 	bl	8000478 <__adddf3>
 8000a50:	4602      	mov	r2, r0
 8000a52:	460b      	mov	r3, r1
 8000a54:	4610      	mov	r0, r2
 8000a56:	4619      	mov	r1, r3
 8000a58:	f7ff ff4c 	bl	80008f4 <__aeabi_d2f>
 8000a5c:	4602      	mov	r2, r0
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	e03f      	b.n	8000ae4 <_ZN8localize14delta_x_updateEff+0x10c>
	}
	else delta_x=delta_x+spd*0.001*(sin(theta)-sin(last_theta));
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff fe63 	bl	8000734 <__aeabi_f2d>
 8000a6e:	4604      	mov	r4, r0
 8000a70:	460d      	mov	r5, r1
 8000a72:	68b8      	ldr	r0, [r7, #8]
 8000a74:	f7ff fe5e 	bl	8000734 <__aeabi_f2d>
 8000a78:	a321      	add	r3, pc, #132	; (adr r3, 8000b00 <_ZN8localize14delta_x_updateEff+0x128>)
 8000a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a7e:	f7ff fbcb 	bl	8000218 <__aeabi_dmul>
 8000a82:	4602      	mov	r2, r0
 8000a84:	460b      	mov	r3, r1
 8000a86:	4690      	mov	r8, r2
 8000a88:	4699      	mov	r9, r3
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	edd3 7a02 	vldr	s15, [r3, #8]
 8000a90:	eeb0 0a67 	vmov.f32	s0, s15
 8000a94:	f7ff ff8e 	bl	80009b4 <_ZSt3sinf>
 8000a98:	eeb0 8a40 	vmov.f32	s16, s0
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	edd3 7a03 	vldr	s15, [r3, #12]
 8000aa2:	eeb0 0a67 	vmov.f32	s0, s15
 8000aa6:	f7ff ff85 	bl	80009b4 <_ZSt3sinf>
 8000aaa:	eef0 7a40 	vmov.f32	s15, s0
 8000aae:	ee78 7a67 	vsub.f32	s15, s16, s15
 8000ab2:	ee17 0a90 	vmov	r0, s15
 8000ab6:	f7ff fe3d 	bl	8000734 <__aeabi_f2d>
 8000aba:	4602      	mov	r2, r0
 8000abc:	460b      	mov	r3, r1
 8000abe:	4640      	mov	r0, r8
 8000ac0:	4649      	mov	r1, r9
 8000ac2:	f7ff fba9 	bl	8000218 <__aeabi_dmul>
 8000ac6:	4602      	mov	r2, r0
 8000ac8:	460b      	mov	r3, r1
 8000aca:	4620      	mov	r0, r4
 8000acc:	4629      	mov	r1, r5
 8000ace:	f7ff fcd3 	bl	8000478 <__adddf3>
 8000ad2:	4602      	mov	r2, r0
 8000ad4:	460b      	mov	r3, r1
 8000ad6:	4610      	mov	r0, r2
 8000ad8:	4619      	mov	r1, r3
 8000ada:	f7ff ff0b 	bl	80008f4 <__aeabi_d2f>
 8000ade:	4602      	mov	r2, r0
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	601a      	str	r2, [r3, #0]
	return delta_x;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	ee07 3a90 	vmov	s15, r3
}
 8000aec:	eeb0 0a67 	vmov.f32	s0, s15
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	ecbd 8b02 	vpop	{d8}
 8000af8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000afc:	f3af 8000 	nop.w
 8000b00:	d2f1a9fc 	.word	0xd2f1a9fc
 8000b04:	3f50624d 	.word	0x3f50624d
 8000b08:	3fe00000 	.word	0x3fe00000
 8000b0c:	00000000 	.word	0x00000000

08000b10 <_ZN8localize14delta_y_updateEff>:
float localize::delta_y_update(float spd,float omega){
 8000b10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000b14:	ed2d 8b02 	vpush	{d8}
 8000b18:	b084      	sub	sp, #16
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	60f8      	str	r0, [r7, #12]
 8000b1e:	ed87 0a02 	vstr	s0, [r7, #8]
 8000b22:	edc7 0a01 	vstr	s1, [r7, #4]
	if(omega<0.01) delta_y=delta_y+(spd+last_spd)*0.001*0.5;
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f7ff fe04 	bl	8000734 <__aeabi_f2d>
 8000b2c:	a345      	add	r3, pc, #276	; (adr r3, 8000c44 <_ZN8localize14delta_y_updateEff+0x134>)
 8000b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b32:	f7ff feb7 	bl	80008a4 <__aeabi_dcmplt>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d02f      	beq.n	8000b9c <_ZN8localize14delta_y_updateEff+0x8c>
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff fdf7 	bl	8000734 <__aeabi_f2d>
 8000b46:	4604      	mov	r4, r0
 8000b48:	460d      	mov	r5, r1
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	ed93 7a04 	vldr	s14, [r3, #16]
 8000b50:	edd7 7a02 	vldr	s15, [r7, #8]
 8000b54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b58:	ee17 0a90 	vmov	r0, s15
 8000b5c:	f7ff fdea 	bl	8000734 <__aeabi_f2d>
 8000b60:	a335      	add	r3, pc, #212	; (adr r3, 8000c38 <_ZN8localize14delta_y_updateEff+0x128>)
 8000b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b66:	f7ff fb57 	bl	8000218 <__aeabi_dmul>
 8000b6a:	4602      	mov	r2, r0
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	4610      	mov	r0, r2
 8000b70:	4619      	mov	r1, r3
 8000b72:	f04f 0200 	mov.w	r2, #0
 8000b76:	4b32      	ldr	r3, [pc, #200]	; (8000c40 <_ZN8localize14delta_y_updateEff+0x130>)
 8000b78:	f7ff fb4e 	bl	8000218 <__aeabi_dmul>
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	460b      	mov	r3, r1
 8000b80:	4620      	mov	r0, r4
 8000b82:	4629      	mov	r1, r5
 8000b84:	f7ff fc78 	bl	8000478 <__adddf3>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	460b      	mov	r3, r1
 8000b8c:	4610      	mov	r0, r2
 8000b8e:	4619      	mov	r1, r3
 8000b90:	f7ff feb0 	bl	80008f4 <__aeabi_d2f>
 8000b94:	4602      	mov	r2, r0
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	e03f      	b.n	8000c1c <_ZN8localize14delta_y_updateEff+0x10c>
	else delta_y=delta_y+spd*0.001*(cos(last_theta)-cos(theta));
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff fdc7 	bl	8000734 <__aeabi_f2d>
 8000ba6:	4604      	mov	r4, r0
 8000ba8:	460d      	mov	r5, r1
 8000baa:	68b8      	ldr	r0, [r7, #8]
 8000bac:	f7ff fdc2 	bl	8000734 <__aeabi_f2d>
 8000bb0:	a321      	add	r3, pc, #132	; (adr r3, 8000c38 <_ZN8localize14delta_y_updateEff+0x128>)
 8000bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bb6:	f7ff fb2f 	bl	8000218 <__aeabi_dmul>
 8000bba:	4602      	mov	r2, r0
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	4690      	mov	r8, r2
 8000bc0:	4699      	mov	r9, r3
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	edd3 7a03 	vldr	s15, [r3, #12]
 8000bc8:	eeb0 0a67 	vmov.f32	s0, s15
 8000bcc:	f7ff fee2 	bl	8000994 <_ZSt3cosf>
 8000bd0:	eeb0 8a40 	vmov.f32	s16, s0
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	edd3 7a02 	vldr	s15, [r3, #8]
 8000bda:	eeb0 0a67 	vmov.f32	s0, s15
 8000bde:	f7ff fed9 	bl	8000994 <_ZSt3cosf>
 8000be2:	eef0 7a40 	vmov.f32	s15, s0
 8000be6:	ee78 7a67 	vsub.f32	s15, s16, s15
 8000bea:	ee17 0a90 	vmov	r0, s15
 8000bee:	f7ff fda1 	bl	8000734 <__aeabi_f2d>
 8000bf2:	4602      	mov	r2, r0
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	4640      	mov	r0, r8
 8000bf8:	4649      	mov	r1, r9
 8000bfa:	f7ff fb0d 	bl	8000218 <__aeabi_dmul>
 8000bfe:	4602      	mov	r2, r0
 8000c00:	460b      	mov	r3, r1
 8000c02:	4620      	mov	r0, r4
 8000c04:	4629      	mov	r1, r5
 8000c06:	f7ff fc37 	bl	8000478 <__adddf3>
 8000c0a:	4602      	mov	r2, r0
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	4610      	mov	r0, r2
 8000c10:	4619      	mov	r1, r3
 8000c12:	f7ff fe6f 	bl	80008f4 <__aeabi_d2f>
 8000c16:	4602      	mov	r2, r0
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	605a      	str	r2, [r3, #4]
	return delta_y;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	ee07 3a90 	vmov	s15, r3
}
 8000c24:	eeb0 0a67 	vmov.f32	s0, s15
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	ecbd 8b02 	vpop	{d8}
 8000c30:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000c34:	f3af 8000 	nop.w
 8000c38:	d2f1a9fc 	.word	0xd2f1a9fc
 8000c3c:	3f50624d 	.word	0x3f50624d
 8000c40:	3fe00000 	.word	0x3fe00000
 8000c44:	47ae147b 	.word	0x47ae147b
 8000c48:	3f847ae1 	.word	0x3f847ae1
 8000c4c:	00000000 	.word	0x00000000

08000c50 <_ZN8localize11thetaUpdateEf>:
float localize::thetaUpdate(float omega){
 8000c50:	b5b0      	push	{r4, r5, r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	ed87 0a00 	vstr	s0, [r7]
	if(omega>0.001) theta=theta+omega*0.001;
 8000c5c:	6838      	ldr	r0, [r7, #0]
 8000c5e:	f7ff fd69 	bl	8000734 <__aeabi_f2d>
 8000c62:	a319      	add	r3, pc, #100	; (adr r3, 8000cc8 <_ZN8localize11thetaUpdateEf+0x78>)
 8000c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c68:	f7ff fe3a 	bl	80008e0 <__aeabi_dcmpgt>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d01d      	beq.n	8000cae <_ZN8localize11thetaUpdateEf+0x5e>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	689b      	ldr	r3, [r3, #8]
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff fd5c 	bl	8000734 <__aeabi_f2d>
 8000c7c:	4604      	mov	r4, r0
 8000c7e:	460d      	mov	r5, r1
 8000c80:	6838      	ldr	r0, [r7, #0]
 8000c82:	f7ff fd57 	bl	8000734 <__aeabi_f2d>
 8000c86:	a310      	add	r3, pc, #64	; (adr r3, 8000cc8 <_ZN8localize11thetaUpdateEf+0x78>)
 8000c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c8c:	f7ff fac4 	bl	8000218 <__aeabi_dmul>
 8000c90:	4602      	mov	r2, r0
 8000c92:	460b      	mov	r3, r1
 8000c94:	4620      	mov	r0, r4
 8000c96:	4629      	mov	r1, r5
 8000c98:	f7ff fbee 	bl	8000478 <__adddf3>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	4610      	mov	r0, r2
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	f7ff fe26 	bl	80008f4 <__aeabi_d2f>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	609a      	str	r2, [r3, #8]
	last_theta=theta;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	689a      	ldr	r2, [r3, #8]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	60da      	str	r2, [r3, #12]
	return theta;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	ee07 3a90 	vmov	s15, r3
}
 8000cbe:	eeb0 0a67 	vmov.f32	s0, s15
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bdb0      	pop	{r4, r5, r7, pc}
 8000cc8:	d2f1a9fc 	.word	0xd2f1a9fc
 8000ccc:	3f50624d 	.word	0x3f50624d

08000cd0 <_ZN8localize11getLineDataEv>:

int localize::getLineData(){
 8000cd0:	b590      	push	{r4, r7, lr}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	line=10000*HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9/*s1*/)+1000*HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7/*s2*/)
 8000cd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce0:	f000 ffbe 	bl	8001c60 <HAL_GPIO_ReadPin>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	f242 7310 	movw	r3, #10000	; 0x2710
 8000cec:	fb03 f402 	mul.w	r4, r3, r2
 8000cf0:	2180      	movs	r1, #128	; 0x80
 8000cf2:	4817      	ldr	r0, [pc, #92]	; (8000d50 <_ZN8localize11getLineDataEv+0x80>)
 8000cf4:	f000 ffb4 	bl	8001c60 <HAL_GPIO_ReadPin>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d00:	fb02 f303 	mul.w	r3, r2, r3
 8000d04:	441c      	add	r4, r3
			 +100*HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6/*s3*/)+10*HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7/*s4*/)
 8000d06:	2140      	movs	r1, #64	; 0x40
 8000d08:	4812      	ldr	r0, [pc, #72]	; (8000d54 <_ZN8localize11getLineDataEv+0x84>)
 8000d0a:	f000 ffa9 	bl	8001c60 <HAL_GPIO_ReadPin>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	461a      	mov	r2, r3
 8000d12:	2364      	movs	r3, #100	; 0x64
 8000d14:	fb02 f303 	mul.w	r3, r2, r3
 8000d18:	441c      	add	r4, r3
 8000d1a:	2180      	movs	r1, #128	; 0x80
 8000d1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d20:	f000 ff9e 	bl	8001c60 <HAL_GPIO_ReadPin>
 8000d24:	4603      	mov	r3, r0
 8000d26:	461a      	mov	r2, r3
 8000d28:	4613      	mov	r3, r2
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	4413      	add	r3, r2
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	441c      	add	r4, r3
			 +HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6/*s5*/);
 8000d32:	2140      	movs	r1, #64	; 0x40
 8000d34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d38:	f000 ff92 	bl	8001c60 <HAL_GPIO_ReadPin>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	18e2      	adds	r2, r4, r3
	line=10000*HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9/*s1*/)+1000*HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7/*s2*/)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	619a      	str	r2, [r3, #24]
	return line;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	699b      	ldr	r3, [r3, #24]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd90      	pop	{r4, r7, pc}
 8000d50:	48000800 	.word	0x48000800
 8000d54:	48000400 	.word	0x48000400

08000d58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d5c:	f000 fc7d 	bl	800165a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d60:	f000 f805 	bl	8000d6e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d64:	f000 f87a 	bl	8000e5c <MX_GPIO_Init>
  MX_TIM6_Init();
 8000d68:	f000 f842 	bl	8000df0 <MX_TIM6_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <main+0x14>

08000d6e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b094      	sub	sp, #80	; 0x50
 8000d72:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d74:	f107 0318 	add.w	r3, r7, #24
 8000d78:	2238      	movs	r2, #56	; 0x38
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f002 fe31 	bl	80039e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d90:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d94:	f000 ff7c 	bl	8001c90 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000da2:	2340      	movs	r3, #64	; 0x40
 8000da4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000da6:	2300      	movs	r3, #0
 8000da8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000daa:	f107 0318 	add.w	r3, r7, #24
 8000dae:	4618      	mov	r0, r3
 8000db0:	f001 f812 	bl	8001dd8 <HAL_RCC_OscConfig>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000dba:	f000 f8af 	bl	8000f1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dbe:	230f      	movs	r3, #15
 8000dc0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f001 fb10 	bl	80023fc <HAL_RCC_ClockConfig>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000de2:	f000 f89b 	bl	8000f1c <Error_Handler>
  }
}
 8000de6:	bf00      	nop
 8000de8:	3750      	adds	r7, #80	; 0x50
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000e00:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <MX_TIM6_Init+0x64>)
 8000e02:	4a15      	ldr	r2, [pc, #84]	; (8000e58 <MX_TIM6_Init+0x68>)
 8000e04:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1600-1;
 8000e06:	4b13      	ldr	r3, [pc, #76]	; (8000e54 <MX_TIM6_Init+0x64>)
 8000e08:	f240 623f 	movw	r2, #1599	; 0x63f
 8000e0c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e0e:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <MX_TIM6_Init+0x64>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9;
 8000e14:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <MX_TIM6_Init+0x64>)
 8000e16:	2209      	movs	r2, #9
 8000e18:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <MX_TIM6_Init+0x64>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000e20:	480c      	ldr	r0, [pc, #48]	; (8000e54 <MX_TIM6_Init+0x64>)
 8000e22:	f001 fccf 	bl	80027c4 <HAL_TIM_Base_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000e2c:	f000 f876 	bl	8000f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e30:	2300      	movs	r3, #0
 8000e32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e34:	2300      	movs	r3, #0
 8000e36:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4805      	ldr	r0, [pc, #20]	; (8000e54 <MX_TIM6_Init+0x64>)
 8000e3e:	f001 ff39 	bl	8002cb4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000e48:	f000 f868 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000e4c:	bf00      	nop
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	200000dc 	.word	0x200000dc
 8000e58:	40001000 	.word	0x40001000

08000e5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b088      	sub	sp, #32
 8000e60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e62:	f107 030c 	add.w	r3, r7, #12
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
 8000e6e:	60da      	str	r2, [r3, #12]
 8000e70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e72:	4b27      	ldr	r3, [pc, #156]	; (8000f10 <MX_GPIO_Init+0xb4>)
 8000e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e76:	4a26      	ldr	r2, [pc, #152]	; (8000f10 <MX_GPIO_Init+0xb4>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e7e:	4b24      	ldr	r3, [pc, #144]	; (8000f10 <MX_GPIO_Init+0xb4>)
 8000e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	60bb      	str	r3, [r7, #8]
 8000e88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8a:	4b21      	ldr	r3, [pc, #132]	; (8000f10 <MX_GPIO_Init+0xb4>)
 8000e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8e:	4a20      	ldr	r2, [pc, #128]	; (8000f10 <MX_GPIO_Init+0xb4>)
 8000e90:	f043 0302 	orr.w	r3, r3, #2
 8000e94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e96:	4b1e      	ldr	r3, [pc, #120]	; (8000f10 <MX_GPIO_Init+0xb4>)
 8000e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea2:	4b1b      	ldr	r3, [pc, #108]	; (8000f10 <MX_GPIO_Init+0xb4>)
 8000ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea6:	4a1a      	ldr	r2, [pc, #104]	; (8000f10 <MX_GPIO_Init+0xb4>)
 8000ea8:	f043 0304 	orr.w	r3, r3, #4
 8000eac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eae:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <MX_GPIO_Init+0xb4>)
 8000eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb2:	f003 0304 	and.w	r3, r3, #4
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : s5_Pin s4_Pin CLP_Pin s1_Pin */
  GPIO_InitStruct.Pin = s5_Pin|s4_Pin|CLP_Pin|s1_Pin;
 8000eba:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000ebe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec8:	f107 030c 	add.w	r3, r7, #12
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed2:	f000 fd43 	bl	800195c <HAL_GPIO_Init>

  /*Configure GPIO pins : Near_Pin s3_Pin */
  GPIO_InitStruct.Pin = Near_Pin|s3_Pin;
 8000ed6:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8000eda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000edc:	2300      	movs	r3, #0
 8000ede:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee4:	f107 030c 	add.w	r3, r7, #12
 8000ee8:	4619      	mov	r1, r3
 8000eea:	480a      	ldr	r0, [pc, #40]	; (8000f14 <MX_GPIO_Init+0xb8>)
 8000eec:	f000 fd36 	bl	800195c <HAL_GPIO_Init>

  /*Configure GPIO pin : s2_Pin */
  GPIO_InitStruct.Pin = s2_Pin;
 8000ef0:	2380      	movs	r3, #128	; 0x80
 8000ef2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(s2_GPIO_Port, &GPIO_InitStruct);
 8000efc:	f107 030c 	add.w	r3, r7, #12
 8000f00:	4619      	mov	r1, r3
 8000f02:	4805      	ldr	r0, [pc, #20]	; (8000f18 <MX_GPIO_Init+0xbc>)
 8000f04:	f000 fd2a 	bl	800195c <HAL_GPIO_Init>

}
 8000f08:	bf00      	nop
 8000f0a:	3720      	adds	r7, #32
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40021000 	.word	0x40021000
 8000f14:	48000400 	.word	0x48000400
 8000f18:	48000800 	.word	0x48000800

08000f1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f20:	b672      	cpsid	i
}
 8000f22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <Error_Handler+0x8>

08000f26 <_ZN8navigate4stopEv>:
 *      Author: yujungHuang
 */
#include "navigation.h"
#include "math.h"

void navigate::stop(){
 8000f26:	b480      	push	{r7}
 8000f28:	b083      	sub	sp, #12
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
	v=0;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f04f 0200 	mov.w	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
	w=0;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f04f 0200 	mov.w	r2, #0
 8000f3c:	60da      	str	r2, [r3, #12]
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	0000      	movs	r0, r0
 8000f4c:	0000      	movs	r0, r0
	...

08000f50 <_ZN8navigate10spdControlEfff>:

float navigate::spdControl(float spd, float x_distance, float theta){
 8000f50:	b5b0      	push	{r4, r5, r7, lr}
 8000f52:	ed2d 8b02 	vpush	{d8}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f60:	edc7 0a01 	vstr	s1, [r7, #4]
 8000f64:	ed87 1a00 	vstr	s2, [r7]
	v=spd*cos(theta);
 8000f68:	ed97 0a00 	vldr	s0, [r7]
 8000f6c:	f7ff fd12 	bl	8000994 <_ZSt3cosf>
 8000f70:	eeb0 7a40 	vmov.f32	s14, s0
 8000f74:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	edc3 7a02 	vstr	s15, [r3, #8]
	//1s to speed up to max speed, 3s to slow down to 0
	if(x_distance<goal_distance*0.5&&v<Mv){
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff fbd6 	bl	8000734 <__aeabi_f2d>
 8000f88:	4604      	mov	r4, r0
 8000f8a:	460d      	mov	r5, r1
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff fbcf 	bl	8000734 <__aeabi_f2d>
 8000f96:	f04f 0200 	mov.w	r2, #0
 8000f9a:	4b47      	ldr	r3, [pc, #284]	; (80010b8 <_ZN8navigate10spdControlEfff+0x168>)
 8000f9c:	f7ff f93c 	bl	8000218 <__aeabi_dmul>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	4620      	mov	r0, r4
 8000fa6:	4629      	mov	r1, r5
 8000fa8:	f7ff fc7c 	bl	80008a4 <__aeabi_dcmplt>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d01f      	beq.n	8000ff2 <_ZN8navigate10spdControlEfff+0xa2>
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	edd3 7a02 	vldr	s15, [r3, #8]
 8000fb8:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8000fbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fc4:	d515      	bpl.n	8000ff2 <_ZN8navigate10spdControlEfff+0xa2>
		v=v+Mv*0.001/*1000Hz*/;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff fbb2 	bl	8000734 <__aeabi_f2d>
 8000fd0:	a333      	add	r3, pc, #204	; (adr r3, 80010a0 <_ZN8navigate10spdControlEfff+0x150>)
 8000fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd6:	f7ff fa4f 	bl	8000478 <__adddf3>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	460b      	mov	r3, r1
 8000fde:	4610      	mov	r0, r2
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f7ff fc87 	bl	80008f4 <__aeabi_d2f>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	609a      	str	r2, [r3, #8]
		return v;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	e04b      	b.n	800108a <_ZN8navigate10spdControlEfff+0x13a>
	}
	if(x_distance>goal_distance-0.5*3*Mv&&v>mv) v=v-Mv*0.333*0.001;
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f7ff fb9e 	bl	8000734 <__aeabi_f2d>
 8000ff8:	4604      	mov	r4, r0
 8000ffa:	460d      	mov	r5, r1
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff fb97 	bl	8000734 <__aeabi_f2d>
 8001006:	f04f 0200 	mov.w	r2, #0
 800100a:	4b2c      	ldr	r3, [pc, #176]	; (80010bc <_ZN8navigate10spdControlEfff+0x16c>)
 800100c:	f7ff fa32 	bl	8000474 <__aeabi_dsub>
 8001010:	4602      	mov	r2, r0
 8001012:	460b      	mov	r3, r1
 8001014:	4620      	mov	r0, r4
 8001016:	4629      	mov	r1, r5
 8001018:	f7ff fc62 	bl	80008e0 <__aeabi_dcmpgt>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d020      	beq.n	8001064 <_ZN8navigate10spdControlEfff+0x114>
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff fb84 	bl	8000734 <__aeabi_f2d>
 800102c:	a31e      	add	r3, pc, #120	; (adr r3, 80010a8 <_ZN8navigate10spdControlEfff+0x158>)
 800102e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001032:	f7ff fc55 	bl	80008e0 <__aeabi_dcmpgt>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d013      	beq.n	8001064 <_ZN8navigate10spdControlEfff+0x114>
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff fb77 	bl	8000734 <__aeabi_f2d>
 8001046:	a31a      	add	r3, pc, #104	; (adr r3, 80010b0 <_ZN8navigate10spdControlEfff+0x160>)
 8001048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104c:	f7ff fa12 	bl	8000474 <__aeabi_dsub>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	4610      	mov	r0, r2
 8001056:	4619      	mov	r1, r3
 8001058:	f7ff fc4c 	bl	80008f4 <__aeabi_d2f>
 800105c:	4602      	mov	r2, r0
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	e002      	b.n	800106a <_ZN8navigate10spdControlEfff+0x11a>
	else v=mv;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	4a16      	ldr	r2, [pc, #88]	; (80010c0 <_ZN8navigate10spdControlEfff+0x170>)
 8001068:	609a      	str	r2, [r3, #8]
	v=v/cos(theta);
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	ed93 8a02 	vldr	s16, [r3, #8]
 8001070:	ed97 0a00 	vldr	s0, [r7]
 8001074:	f7ff fc8e 	bl	8000994 <_ZSt3cosf>
 8001078:	eeb0 7a40 	vmov.f32	s14, s0
 800107c:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	edc3 7a02 	vstr	s15, [r3, #8]
	return v;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	689b      	ldr	r3, [r3, #8]
}
 800108a:	ee07 3a90 	vmov	s15, r3
 800108e:	eeb0 0a67 	vmov.f32	s0, s15
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	ecbd 8b02 	vpop	{d8}
 800109a:	bdb0      	pop	{r4, r5, r7, pc}
 800109c:	f3af 8000 	nop.w
 80010a0:	eb851eb8 	.word	0xeb851eb8
 80010a4:	3f8eb851 	.word	0x3f8eb851
 80010a8:	9999999a 	.word	0x9999999a
 80010ac:	3fc99999 	.word	0x3fc99999
 80010b0:	1a4bdba1 	.word	0x1a4bdba1
 80010b4:	3f7475a3 	.word	0x3f7475a3
 80010b8:	3fe00000 	.word	0x3fe00000
 80010bc:	40368000 	.word	0x40368000
 80010c0:	3e4ccccd 	.word	0x3e4ccccd
 80010c4:	00000000 	.word	0x00000000

080010c8 <_ZN8navigate8wControlEff>:
float navigate::wControl(float omega, float theta){
 80010c8:	b5b0      	push	{r4, r5, r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80010d4:	edc7 0a01 	vstr	s1, [r7, #4]
	w=omega;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	68ba      	ldr	r2, [r7, #8]
 80010dc:	60da      	str	r2, [r3, #12]
	//0.5s to speed up to max omega, 0.5s to slow down to 0
	if(theta<goal_theta*0.5&&w<Mw){
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff fb28 	bl	8000734 <__aeabi_f2d>
 80010e4:	4604      	mov	r4, r0
 80010e6:	460d      	mov	r5, r1
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fb21 	bl	8000734 <__aeabi_f2d>
 80010f2:	f04f 0200 	mov.w	r2, #0
 80010f6:	4b42      	ldr	r3, [pc, #264]	; (8001200 <_ZN8navigate8wControlEff+0x138>)
 80010f8:	f7ff f88e 	bl	8000218 <__aeabi_dmul>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	4620      	mov	r0, r4
 8001102:	4629      	mov	r1, r5
 8001104:	f7ff fbce 	bl	80008a4 <__aeabi_dcmplt>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d022      	beq.n	8001154 <_ZN8navigate8wControlEff+0x8c>
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff fb0e 	bl	8000734 <__aeabi_f2d>
 8001118:	a331      	add	r3, pc, #196	; (adr r3, 80011e0 <_ZN8navigate8wControlEff+0x118>)
 800111a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111e:	f7ff fbc1 	bl	80008a4 <__aeabi_dcmplt>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d015      	beq.n	8001154 <_ZN8navigate8wControlEff+0x8c>
		w=w+Mw*2*0.001;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff fb01 	bl	8000734 <__aeabi_f2d>
 8001132:	a32d      	add	r3, pc, #180	; (adr r3, 80011e8 <_ZN8navigate8wControlEff+0x120>)
 8001134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001138:	f7ff f99e 	bl	8000478 <__adddf3>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	4610      	mov	r0, r2
 8001142:	4619      	mov	r1, r3
 8001144:	f7ff fbd6 	bl	80008f4 <__aeabi_d2f>
 8001148:	4602      	mov	r2, r0
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	60da      	str	r2, [r3, #12]
		return w;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	e03d      	b.n	80011d0 <_ZN8navigate8wControlEff+0x108>
	}
	if(theta>goal_theta-0.5*0.5*Mw&&w>mw) w=w-Mw*2*0.001;
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff faed 	bl	8000734 <__aeabi_f2d>
 800115a:	4604      	mov	r4, r0
 800115c:	460d      	mov	r5, r1
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff fae6 	bl	8000734 <__aeabi_f2d>
 8001168:	a321      	add	r3, pc, #132	; (adr r3, 80011f0 <_ZN8navigate8wControlEff+0x128>)
 800116a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116e:	f7ff f981 	bl	8000474 <__aeabi_dsub>
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	4620      	mov	r0, r4
 8001178:	4629      	mov	r1, r5
 800117a:	f7ff fbb1 	bl	80008e0 <__aeabi_dcmpgt>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d020      	beq.n	80011c6 <_ZN8navigate8wControlEff+0xfe>
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff fad3 	bl	8000734 <__aeabi_f2d>
 800118e:	a31a      	add	r3, pc, #104	; (adr r3, 80011f8 <_ZN8navigate8wControlEff+0x130>)
 8001190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001194:	f7ff fba4 	bl	80008e0 <__aeabi_dcmpgt>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d013      	beq.n	80011c6 <_ZN8navigate8wControlEff+0xfe>
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff fac6 	bl	8000734 <__aeabi_f2d>
 80011a8:	a30f      	add	r3, pc, #60	; (adr r3, 80011e8 <_ZN8navigate8wControlEff+0x120>)
 80011aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ae:	f7ff f961 	bl	8000474 <__aeabi_dsub>
 80011b2:	4602      	mov	r2, r0
 80011b4:	460b      	mov	r3, r1
 80011b6:	4610      	mov	r0, r2
 80011b8:	4619      	mov	r1, r3
 80011ba:	f7ff fb9b 	bl	80008f4 <__aeabi_d2f>
 80011be:	4602      	mov	r2, r0
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	60da      	str	r2, [r3, #12]
 80011c4:	e002      	b.n	80011cc <_ZN8navigate8wControlEff+0x104>
	else w=mw;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	4a0e      	ldr	r2, [pc, #56]	; (8001204 <_ZN8navigate8wControlEff+0x13c>)
 80011ca:	60da      	str	r2, [r3, #12]
	return w;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	68db      	ldr	r3, [r3, #12]
}
 80011d0:	ee07 3a90 	vmov	s15, r3
 80011d4:	eeb0 0a67 	vmov.f32	s0, s15
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bdb0      	pop	{r4, r5, r7, pc}
 80011de:	bf00      	nop
 80011e0:	769cf0e0 	.word	0x769cf0e0
 80011e4:	3fe41b2f 	.word	0x3fe41b2f
 80011e8:	c53c5b02 	.word	0xc53c5b02
 80011ec:	3f5496b7 	.word	0x3f5496b7
 80011f0:	769cf0e0 	.word	0x769cf0e0
 80011f4:	3fc41b2f 	.word	0x3fc41b2f
 80011f8:	9217271a 	.word	0x9217271a
 80011fc:	3fb015bf 	.word	0x3fb015bf
 8001200:	3fe00000 	.word	0x3fe00000
 8001204:	3d80adfd 	.word	0x3d80adfd

08001208 <_ZN8navigate12y_correctionEfff>:

float navigate::y_correction(float spd, float theta, float y_distance){
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	ed87 0a02 	vstr	s0, [r7, #8]
 8001214:	edc7 0a01 	vstr	s1, [r7, #4]
 8001218:	ed87 1a00 	vstr	s2, [r7]

	return y_w;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	691b      	ldr	r3, [r3, #16]
 8001220:	ee07 3a90 	vmov	s15, r3
}
 8001224:	eeb0 0a67 	vmov.f32	s0, s15
 8001228:	3714      	adds	r7, #20
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <_ZN8navigate16navLineAssistingEi>:
float navigate::navLineAssisting(int lineInfo){
 8001232:	b480      	push	{r7}
 8001234:	b083      	sub	sp, #12
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
 800123a:	6039      	str	r1, [r7, #0]

	return nav_w;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	695b      	ldr	r3, [r3, #20]
 8001240:	ee07 3a90 	vmov	s15, r3
}
 8001244:	eeb0 0a67 	vmov.f32	s0, s15
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <_ZN8navigate8getMeanWEv>:
float navigate::getMeanW(){
 8001252:	b480      	push	{r7}
 8001254:	b083      	sub	sp, #12
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
	w=(y_w+nav_w)*0.5;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	ed93 7a04 	vldr	s14, [r3, #16]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	edd3 7a05 	vldr	s15, [r3, #20]
 8001266:	ee77 7a27 	vadd.f32	s15, s14, s15
 800126a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800126e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	edc3 7a03 	vstr	s15, [r3, #12]
	return w;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	ee07 3a90 	vmov	s15, r3
}
 8001280:	eeb0 0a67 	vmov.f32	s0, s15
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
	...

08001290 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001296:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <HAL_MspInit+0x44>)
 8001298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800129a:	4a0e      	ldr	r2, [pc, #56]	; (80012d4 <HAL_MspInit+0x44>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	6613      	str	r3, [r2, #96]	; 0x60
 80012a2:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <HAL_MspInit+0x44>)
 80012a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ae:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <HAL_MspInit+0x44>)
 80012b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b2:	4a08      	ldr	r2, [pc, #32]	; (80012d4 <HAL_MspInit+0x44>)
 80012b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b8:	6593      	str	r3, [r2, #88]	; 0x58
 80012ba:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <HAL_MspInit+0x44>)
 80012bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c2:	603b      	str	r3, [r7, #0]
 80012c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	40021000 	.word	0x40021000

080012d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a0d      	ldr	r2, [pc, #52]	; (800131c <HAL_TIM_Base_MspInit+0x44>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d113      	bne.n	8001312 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80012ea:	4b0d      	ldr	r3, [pc, #52]	; (8001320 <HAL_TIM_Base_MspInit+0x48>)
 80012ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ee:	4a0c      	ldr	r2, [pc, #48]	; (8001320 <HAL_TIM_Base_MspInit+0x48>)
 80012f0:	f043 0310 	orr.w	r3, r3, #16
 80012f4:	6593      	str	r3, [r2, #88]	; 0x58
 80012f6:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <HAL_TIM_Base_MspInit+0x48>)
 80012f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012fa:	f003 0310 	and.w	r3, r3, #16
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	2100      	movs	r1, #0
 8001306:	2036      	movs	r0, #54	; 0x36
 8001308:	f000 faf3 	bl	80018f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800130c:	2036      	movs	r0, #54	; 0x36
 800130e:	f000 fb0a 	bl	8001926 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001312:	bf00      	nop
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40001000 	.word	0x40001000
 8001320:	40021000 	.word	0x40021000

08001324 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001328:	e7fe      	b.n	8001328 <NMI_Handler+0x4>

0800132a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800132e:	e7fe      	b.n	800132e <HardFault_Handler+0x4>

08001330 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001334:	e7fe      	b.n	8001334 <MemManage_Handler+0x4>

08001336 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001336:	b480      	push	{r7}
 8001338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800133a:	e7fe      	b.n	800133a <BusFault_Handler+0x4>

0800133c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001340:	e7fe      	b.n	8001340 <UsageFault_Handler+0x4>

08001342 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001342:	b480      	push	{r7}
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001370:	f000 f9c6 	bl	8001700 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001374:	bf00      	nop
 8001376:	bd80      	pop	{r7, pc}

08001378 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800137c:	4802      	ldr	r0, [pc, #8]	; (8001388 <TIM6_DAC_IRQHandler+0x10>)
 800137e:	f001 fa78 	bl	8002872 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200000dc 	.word	0x200000dc

0800138c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <SystemInit+0x20>)
 8001392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001396:	4a05      	ldr	r2, [pc, #20]	; (80013ac <SystemInit+0x20>)
 8001398:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800139c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80013ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80013be:	eef0 7ae7 	vabs.f32	s15, s15
 80013c2:	eeb0 0a67 	vmov.f32	s0, s15
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <_ZN8navigateC1Ev>:
//extern float spd;
//extern float omega;
//extern int lineInfo;
extern float missions[];

typedef class navigate{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f04f 0200 	mov.w	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	60da      	str	r2, [r3, #12]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f04f 0200 	mov.w	r2, #0
 80013ee:	611a      	str	r2, [r3, #16]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f04f 0200 	mov.w	r2, #0
 80013f6:	615a      	str	r2, [r3, #20]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4618      	mov	r0, r3
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
	...

08001408 <HAL_TIM_PeriodElapsedCallback>:

void setup(){
	HAL_TIM_Base_Start_IT(&htim6);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001408:	b590      	push	{r4, r7, lr}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
	theta=theta+car.thetaUpdate(omega);
 8001410:	4b63      	ldr	r3, [pc, #396]	; (80015a0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001412:	edd3 7a00 	vldr	s15, [r3]
 8001416:	eeb0 0a67 	vmov.f32	s0, s15
 800141a:	4862      	ldr	r0, [pc, #392]	; (80015a4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800141c:	f7ff fc18 	bl	8000c50 <_ZN8localize11thetaUpdateEf>
 8001420:	eeb0 7a40 	vmov.f32	s14, s0
 8001424:	4b60      	ldr	r3, [pc, #384]	; (80015a8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001426:	edd3 7a00 	vldr	s15, [r3]
 800142a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800142e:	4b5e      	ldr	r3, [pc, #376]	; (80015a8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001430:	edc3 7a00 	vstr	s15, [r3]
	x_distance=car.delta_x_update(spd,omega);
 8001434:	4b5d      	ldr	r3, [pc, #372]	; (80015ac <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001436:	edd3 7a00 	vldr	s15, [r3]
 800143a:	4b59      	ldr	r3, [pc, #356]	; (80015a0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 800143c:	ed93 7a00 	vldr	s14, [r3]
 8001440:	eef0 0a47 	vmov.f32	s1, s14
 8001444:	eeb0 0a67 	vmov.f32	s0, s15
 8001448:	4856      	ldr	r0, [pc, #344]	; (80015a4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800144a:	f7ff fac5 	bl	80009d8 <_ZN8localize14delta_x_updateEff>
 800144e:	eef0 7a40 	vmov.f32	s15, s0
 8001452:	4b57      	ldr	r3, [pc, #348]	; (80015b0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001454:	edc3 7a00 	vstr	s15, [r3]
	y_distance=car.delta_y_update(spd,omega);
 8001458:	4b54      	ldr	r3, [pc, #336]	; (80015ac <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800145a:	edd3 7a00 	vldr	s15, [r3]
 800145e:	4b50      	ldr	r3, [pc, #320]	; (80015a0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001460:	ed93 7a00 	vldr	s14, [r3]
 8001464:	eef0 0a47 	vmov.f32	s1, s14
 8001468:	eeb0 0a67 	vmov.f32	s0, s15
 800146c:	484d      	ldr	r0, [pc, #308]	; (80015a4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800146e:	f7ff fb4f 	bl	8000b10 <_ZN8localize14delta_y_updateEff>
 8001472:	eef0 7a40 	vmov.f32	s15, s0
 8001476:	4b4f      	ldr	r3, [pc, #316]	; (80015b4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001478:	edc3 7a00 	vstr	s15, [r3]
	lineInfo=car.getLineData();
 800147c:	4849      	ldr	r0, [pc, #292]	; (80015a4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800147e:	f7ff fc27 	bl	8000cd0 <_ZN8localize11getLineDataEv>
 8001482:	4603      	mov	r3, r0
 8001484:	4a4c      	ldr	r2, [pc, #304]	; (80015b8 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001486:	6013      	str	r3, [r2, #0]
	if(abs(missions[index]-x_distance)>0.005){
 8001488:	4b4c      	ldr	r3, [pc, #304]	; (80015bc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a4c      	ldr	r2, [pc, #304]	; (80015c0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	4413      	add	r3, r2
 8001492:	ed93 7a00 	vldr	s14, [r3]
 8001496:	4b46      	ldr	r3, [pc, #280]	; (80015b0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001498:	edd3 7a00 	vldr	s15, [r3]
 800149c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014a0:	eeb0 0a67 	vmov.f32	s0, s15
 80014a4:	f7ff ff84 	bl	80013b0 <_ZSt3absf>
 80014a8:	ee10 3a10 	vmov	r3, s0
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff f941 	bl	8000734 <__aeabi_f2d>
 80014b2:	2301      	movs	r3, #1
 80014b4:	461c      	mov	r4, r3
 80014b6:	a338      	add	r3, pc, #224	; (adr r3, 8001598 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80014b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014bc:	f7ff fa10 	bl	80008e0 <__aeabi_dcmpgt>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d101      	bne.n	80014ca <HAL_TIM_PeriodElapsedCallback+0xc2>
 80014c6:	2300      	movs	r3, #0
 80014c8:	461c      	mov	r4, r3
 80014ca:	b2e3      	uxtb	r3, r4
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d052      	beq.n	8001576 <HAL_TIM_PeriodElapsedCallback+0x16e>
		if(spd==0) omega=chassis.wControl(omega, theta);
 80014d0:	4b36      	ldr	r3, [pc, #216]	; (80015ac <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80014d2:	edd3 7a00 	vldr	s15, [r3]
 80014d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80014da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014de:	d112      	bne.n	8001506 <HAL_TIM_PeriodElapsedCallback+0xfe>
 80014e0:	4b2f      	ldr	r3, [pc, #188]	; (80015a0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80014e2:	edd3 7a00 	vldr	s15, [r3]
 80014e6:	4b30      	ldr	r3, [pc, #192]	; (80015a8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80014e8:	ed93 7a00 	vldr	s14, [r3]
 80014ec:	eef0 0a47 	vmov.f32	s1, s14
 80014f0:	eeb0 0a67 	vmov.f32	s0, s15
 80014f4:	4833      	ldr	r0, [pc, #204]	; (80015c4 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80014f6:	f7ff fde7 	bl	80010c8 <_ZN8navigate8wControlEff>
 80014fa:	eef0 7a40 	vmov.f32	s15, s0
 80014fe:	4b28      	ldr	r3, [pc, #160]	; (80015a0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001500:	edc3 7a00 	vstr	s15, [r3]
 8001504:	e03f      	b.n	8001586 <HAL_TIM_PeriodElapsedCallback+0x17e>
		else {
			chassis.y_correction(spd, theta, y_distance);
 8001506:	4b29      	ldr	r3, [pc, #164]	; (80015ac <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001508:	edd3 7a00 	vldr	s15, [r3]
 800150c:	4b26      	ldr	r3, [pc, #152]	; (80015a8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800150e:	ed93 7a00 	vldr	s14, [r3]
 8001512:	4b28      	ldr	r3, [pc, #160]	; (80015b4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001514:	edd3 6a00 	vldr	s13, [r3]
 8001518:	eeb0 1a66 	vmov.f32	s2, s13
 800151c:	eef0 0a47 	vmov.f32	s1, s14
 8001520:	eeb0 0a67 	vmov.f32	s0, s15
 8001524:	4827      	ldr	r0, [pc, #156]	; (80015c4 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001526:	f7ff fe6f 	bl	8001208 <_ZN8navigate12y_correctionEfff>
			chassis.navLineAssisting(lineInfo);
 800152a:	4b23      	ldr	r3, [pc, #140]	; (80015b8 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4619      	mov	r1, r3
 8001530:	4824      	ldr	r0, [pc, #144]	; (80015c4 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001532:	f7ff fe7e 	bl	8001232 <_ZN8navigate16navLineAssistingEi>
			omega=chassis.getMeanW();
 8001536:	4823      	ldr	r0, [pc, #140]	; (80015c4 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001538:	f7ff fe8b 	bl	8001252 <_ZN8navigate8getMeanWEv>
 800153c:	eef0 7a40 	vmov.f32	s15, s0
 8001540:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001542:	edc3 7a00 	vstr	s15, [r3]
			spd=chassis.spdControl(spd, x_distance, theta);
 8001546:	4b19      	ldr	r3, [pc, #100]	; (80015ac <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001548:	edd3 7a00 	vldr	s15, [r3]
 800154c:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 800154e:	ed93 7a00 	vldr	s14, [r3]
 8001552:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001554:	edd3 6a00 	vldr	s13, [r3]
 8001558:	eeb0 1a66 	vmov.f32	s2, s13
 800155c:	eef0 0a47 	vmov.f32	s1, s14
 8001560:	eeb0 0a67 	vmov.f32	s0, s15
 8001564:	4817      	ldr	r0, [pc, #92]	; (80015c4 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001566:	f7ff fcf3 	bl	8000f50 <_ZN8navigate10spdControlEfff>
 800156a:	eef0 7a40 	vmov.f32	s15, s0
 800156e:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001570:	edc3 7a00 	vstr	s15, [r3]
 8001574:	e007      	b.n	8001586 <HAL_TIM_PeriodElapsedCallback+0x17e>
		}
	}else {
		chassis.stop();
 8001576:	4813      	ldr	r0, [pc, #76]	; (80015c4 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001578:	f7ff fcd5 	bl	8000f26 <_ZN8navigate4stopEv>
		index++;
 800157c:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	3301      	adds	r3, #1
 8001582:	4a0e      	ldr	r2, [pc, #56]	; (80015bc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001584:	6013      	str	r3, [r2, #0]
		if(missions[index]==2048){
			//send complete message
		}
	}
	count++;
 8001586:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	3301      	adds	r3, #1
 800158c:	4a0e      	ldr	r2, [pc, #56]	; (80015c8 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800158e:	6013      	str	r3, [r2, #0]
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	bd90      	pop	{r4, r7, pc}
 8001598:	47ae147b 	.word	0x47ae147b
 800159c:	3f747ae1 	.word	0x3f747ae1
 80015a0:	2000012c 	.word	0x2000012c
 80015a4:	2000009c 	.word	0x2000009c
 80015a8:	20000130 	.word	0x20000130
 80015ac:	20000128 	.word	0x20000128
 80015b0:	20000134 	.word	0x20000134
 80015b4:	20000138 	.word	0x20000138
 80015b8:	20000000 	.word	0x20000000
 80015bc:	2000013c 	.word	0x2000013c
 80015c0:	20000004 	.word	0x20000004
 80015c4:	20000140 	.word	0x20000140
 80015c8:	20000158 	.word	0x20000158

080015cc <_Z41__static_initialization_and_destruction_0ii>:
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d107      	bne.n	80015ec <_Z41__static_initialization_and_destruction_0ii+0x20>
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d102      	bne.n	80015ec <_Z41__static_initialization_and_destruction_0ii+0x20>
navigate chassis;
 80015e6:	4803      	ldr	r0, [pc, #12]	; (80015f4 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80015e8:	f7ff fef2 	bl	80013d0 <_ZN8navigateC1Ev>
}
 80015ec:	bf00      	nop
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000140 	.word	0x20000140

080015f8 <_GLOBAL__sub_I_car>:
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001600:	2001      	movs	r0, #1
 8001602:	f7ff ffe3 	bl	80015cc <_Z41__static_initialization_and_destruction_0ii>
 8001606:	bd80      	pop	{r7, pc}

08001608 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001608:	480d      	ldr	r0, [pc, #52]	; (8001640 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800160a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800160c:	f7ff febe 	bl	800138c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001610:	480c      	ldr	r0, [pc, #48]	; (8001644 <LoopForever+0x6>)
  ldr r1, =_edata
 8001612:	490d      	ldr	r1, [pc, #52]	; (8001648 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001614:	4a0d      	ldr	r2, [pc, #52]	; (800164c <LoopForever+0xe>)
  movs r3, #0
 8001616:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001618:	e002      	b.n	8001620 <LoopCopyDataInit>

0800161a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800161a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800161c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800161e:	3304      	adds	r3, #4

08001620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001624:	d3f9      	bcc.n	800161a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001626:	4a0a      	ldr	r2, [pc, #40]	; (8001650 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001628:	4c0a      	ldr	r4, [pc, #40]	; (8001654 <LoopForever+0x16>)
  movs r3, #0
 800162a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800162c:	e001      	b.n	8001632 <LoopFillZerobss>

0800162e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800162e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001630:	3204      	adds	r2, #4

08001632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001634:	d3fb      	bcc.n	800162e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001636:	f002 f9b1 	bl	800399c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800163a:	f7ff fb8d 	bl	8000d58 <main>

0800163e <LoopForever>:

LoopForever:
    b LoopForever
 800163e:	e7fe      	b.n	800163e <LoopForever>
  ldr   r0, =_estack
 8001640:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8001644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001648:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 800164c:	08003df8 	.word	0x08003df8
  ldr r2, =_sbss
 8001650:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8001654:	20000160 	.word	0x20000160

08001658 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001658:	e7fe      	b.n	8001658 <ADC1_2_IRQHandler>

0800165a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b082      	sub	sp, #8
 800165e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001660:	2300      	movs	r3, #0
 8001662:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001664:	2003      	movs	r0, #3
 8001666:	f000 f939 	bl	80018dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800166a:	200f      	movs	r0, #15
 800166c:	f000 f80e 	bl	800168c <HAL_InitTick>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d002      	beq.n	800167c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	71fb      	strb	r3, [r7, #7]
 800167a:	e001      	b.n	8001680 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800167c:	f7ff fe08 	bl	8001290 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001680:	79fb      	ldrb	r3, [r7, #7]

}
 8001682:	4618      	mov	r0, r3
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
	...

0800168c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001694:	2300      	movs	r3, #0
 8001696:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001698:	4b16      	ldr	r3, [pc, #88]	; (80016f4 <HAL_InitTick+0x68>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d022      	beq.n	80016e6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80016a0:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <HAL_InitTick+0x6c>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <HAL_InitTick+0x68>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80016b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b4:	4618      	mov	r0, r3
 80016b6:	f000 f944 	bl	8001942 <HAL_SYSTICK_Config>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d10f      	bne.n	80016e0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2b0f      	cmp	r3, #15
 80016c4:	d809      	bhi.n	80016da <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016c6:	2200      	movs	r2, #0
 80016c8:	6879      	ldr	r1, [r7, #4]
 80016ca:	f04f 30ff 	mov.w	r0, #4294967295
 80016ce:	f000 f910 	bl	80018f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016d2:	4a0a      	ldr	r2, [pc, #40]	; (80016fc <HAL_InitTick+0x70>)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6013      	str	r3, [r2, #0]
 80016d8:	e007      	b.n	80016ea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	73fb      	strb	r3, [r7, #15]
 80016de:	e004      	b.n	80016ea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	73fb      	strb	r3, [r7, #15]
 80016e4:	e001      	b.n	80016ea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3710      	adds	r7, #16
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	200000bc 	.word	0x200000bc
 80016f8:	20000098 	.word	0x20000098
 80016fc:	200000b8 	.word	0x200000b8

08001700 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001704:	4b05      	ldr	r3, [pc, #20]	; (800171c <HAL_IncTick+0x1c>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	4b05      	ldr	r3, [pc, #20]	; (8001720 <HAL_IncTick+0x20>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4413      	add	r3, r2
 800170e:	4a03      	ldr	r2, [pc, #12]	; (800171c <HAL_IncTick+0x1c>)
 8001710:	6013      	str	r3, [r2, #0]
}
 8001712:	bf00      	nop
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	2000015c 	.word	0x2000015c
 8001720:	200000bc 	.word	0x200000bc

08001724 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  return uwTick;
 8001728:	4b03      	ldr	r3, [pc, #12]	; (8001738 <HAL_GetTick+0x14>)
 800172a:	681b      	ldr	r3, [r3, #0]
}
 800172c:	4618      	mov	r0, r3
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	2000015c 	.word	0x2000015c

0800173c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800174c:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <__NVIC_SetPriorityGrouping+0x44>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001758:	4013      	ands	r3, r2
 800175a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001764:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800176c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800176e:	4a04      	ldr	r2, [pc, #16]	; (8001780 <__NVIC_SetPriorityGrouping+0x44>)
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	60d3      	str	r3, [r2, #12]
}
 8001774:	bf00      	nop
 8001776:	3714      	adds	r7, #20
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001788:	4b04      	ldr	r3, [pc, #16]	; (800179c <__NVIC_GetPriorityGrouping+0x18>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	0a1b      	lsrs	r3, r3, #8
 800178e:	f003 0307 	and.w	r3, r3, #7
}
 8001792:	4618      	mov	r0, r3
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	db0b      	blt.n	80017ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017b2:	79fb      	ldrb	r3, [r7, #7]
 80017b4:	f003 021f 	and.w	r2, r3, #31
 80017b8:	4907      	ldr	r1, [pc, #28]	; (80017d8 <__NVIC_EnableIRQ+0x38>)
 80017ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017be:	095b      	lsrs	r3, r3, #5
 80017c0:	2001      	movs	r0, #1
 80017c2:	fa00 f202 	lsl.w	r2, r0, r2
 80017c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	e000e100 	.word	0xe000e100

080017dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	6039      	str	r1, [r7, #0]
 80017e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	db0a      	blt.n	8001806 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	490c      	ldr	r1, [pc, #48]	; (8001828 <__NVIC_SetPriority+0x4c>)
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	0112      	lsls	r2, r2, #4
 80017fc:	b2d2      	uxtb	r2, r2
 80017fe:	440b      	add	r3, r1
 8001800:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001804:	e00a      	b.n	800181c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	b2da      	uxtb	r2, r3
 800180a:	4908      	ldr	r1, [pc, #32]	; (800182c <__NVIC_SetPriority+0x50>)
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	f003 030f 	and.w	r3, r3, #15
 8001812:	3b04      	subs	r3, #4
 8001814:	0112      	lsls	r2, r2, #4
 8001816:	b2d2      	uxtb	r2, r2
 8001818:	440b      	add	r3, r1
 800181a:	761a      	strb	r2, [r3, #24]
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	e000e100 	.word	0xe000e100
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001830:	b480      	push	{r7}
 8001832:	b089      	sub	sp, #36	; 0x24
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	f1c3 0307 	rsb	r3, r3, #7
 800184a:	2b04      	cmp	r3, #4
 800184c:	bf28      	it	cs
 800184e:	2304      	movcs	r3, #4
 8001850:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	3304      	adds	r3, #4
 8001856:	2b06      	cmp	r3, #6
 8001858:	d902      	bls.n	8001860 <NVIC_EncodePriority+0x30>
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	3b03      	subs	r3, #3
 800185e:	e000      	b.n	8001862 <NVIC_EncodePriority+0x32>
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001864:	f04f 32ff 	mov.w	r2, #4294967295
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43da      	mvns	r2, r3
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	401a      	ands	r2, r3
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001878:	f04f 31ff 	mov.w	r1, #4294967295
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	fa01 f303 	lsl.w	r3, r1, r3
 8001882:	43d9      	mvns	r1, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001888:	4313      	orrs	r3, r2
         );
}
 800188a:	4618      	mov	r0, r3
 800188c:	3724      	adds	r7, #36	; 0x24
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
	...

08001898 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3b01      	subs	r3, #1
 80018a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018a8:	d301      	bcc.n	80018ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018aa:	2301      	movs	r3, #1
 80018ac:	e00f      	b.n	80018ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ae:	4a0a      	ldr	r2, [pc, #40]	; (80018d8 <SysTick_Config+0x40>)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3b01      	subs	r3, #1
 80018b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018b6:	210f      	movs	r1, #15
 80018b8:	f04f 30ff 	mov.w	r0, #4294967295
 80018bc:	f7ff ff8e 	bl	80017dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018c0:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <SysTick_Config+0x40>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018c6:	4b04      	ldr	r3, [pc, #16]	; (80018d8 <SysTick_Config+0x40>)
 80018c8:	2207      	movs	r2, #7
 80018ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	e000e010 	.word	0xe000e010

080018dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f7ff ff29 	bl	800173c <__NVIC_SetPriorityGrouping>
}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b086      	sub	sp, #24
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	4603      	mov	r3, r0
 80018fa:	60b9      	str	r1, [r7, #8]
 80018fc:	607a      	str	r2, [r7, #4]
 80018fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001900:	f7ff ff40 	bl	8001784 <__NVIC_GetPriorityGrouping>
 8001904:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	68b9      	ldr	r1, [r7, #8]
 800190a:	6978      	ldr	r0, [r7, #20]
 800190c:	f7ff ff90 	bl	8001830 <NVIC_EncodePriority>
 8001910:	4602      	mov	r2, r0
 8001912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001916:	4611      	mov	r1, r2
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff ff5f 	bl	80017dc <__NVIC_SetPriority>
}
 800191e:	bf00      	nop
 8001920:	3718      	adds	r7, #24
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b082      	sub	sp, #8
 800192a:	af00      	add	r7, sp, #0
 800192c:	4603      	mov	r3, r0
 800192e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff ff33 	bl	80017a0 <__NVIC_EnableIRQ>
}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b082      	sub	sp, #8
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7ff ffa4 	bl	8001898 <SysTick_Config>
 8001950:	4603      	mov	r3, r0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
	...

0800195c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800195c:	b480      	push	{r7}
 800195e:	b087      	sub	sp, #28
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001966:	2300      	movs	r3, #0
 8001968:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800196a:	e15a      	b.n	8001c22 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	2101      	movs	r1, #1
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	fa01 f303 	lsl.w	r3, r1, r3
 8001978:	4013      	ands	r3, r2
 800197a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2b00      	cmp	r3, #0
 8001980:	f000 814c 	beq.w	8001c1c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 0303 	and.w	r3, r3, #3
 800198c:	2b01      	cmp	r3, #1
 800198e:	d005      	beq.n	800199c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001998:	2b02      	cmp	r3, #2
 800199a:	d130      	bne.n	80019fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	2203      	movs	r2, #3
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	4013      	ands	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	68da      	ldr	r2, [r3, #12]
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019d2:	2201      	movs	r2, #1
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	43db      	mvns	r3, r3
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	4013      	ands	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	091b      	lsrs	r3, r3, #4
 80019e8:	f003 0201 	and.w	r2, r3, #1
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f003 0303 	and.w	r3, r3, #3
 8001a06:	2b03      	cmp	r3, #3
 8001a08:	d017      	beq.n	8001a3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	2203      	movs	r2, #3
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	689a      	ldr	r2, [r3, #8]
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f003 0303 	and.w	r3, r3, #3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d123      	bne.n	8001a8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	08da      	lsrs	r2, r3, #3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	3208      	adds	r2, #8
 8001a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	220f      	movs	r2, #15
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43db      	mvns	r3, r3
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	4013      	ands	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	691a      	ldr	r2, [r3, #16]
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	08da      	lsrs	r2, r3, #3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3208      	adds	r2, #8
 8001a88:	6939      	ldr	r1, [r7, #16]
 8001a8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	2203      	movs	r2, #3
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f003 0203 	and.w	r2, r3, #3
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f000 80a6 	beq.w	8001c1c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad0:	4b5b      	ldr	r3, [pc, #364]	; (8001c40 <HAL_GPIO_Init+0x2e4>)
 8001ad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ad4:	4a5a      	ldr	r2, [pc, #360]	; (8001c40 <HAL_GPIO_Init+0x2e4>)
 8001ad6:	f043 0301 	orr.w	r3, r3, #1
 8001ada:	6613      	str	r3, [r2, #96]	; 0x60
 8001adc:	4b58      	ldr	r3, [pc, #352]	; (8001c40 <HAL_GPIO_Init+0x2e4>)
 8001ade:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ae8:	4a56      	ldr	r2, [pc, #344]	; (8001c44 <HAL_GPIO_Init+0x2e8>)
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	089b      	lsrs	r3, r3, #2
 8001aee:	3302      	adds	r3, #2
 8001af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001af4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	f003 0303 	and.w	r3, r3, #3
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	220f      	movs	r2, #15
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b12:	d01f      	beq.n	8001b54 <HAL_GPIO_Init+0x1f8>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a4c      	ldr	r2, [pc, #304]	; (8001c48 <HAL_GPIO_Init+0x2ec>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d019      	beq.n	8001b50 <HAL_GPIO_Init+0x1f4>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a4b      	ldr	r2, [pc, #300]	; (8001c4c <HAL_GPIO_Init+0x2f0>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d013      	beq.n	8001b4c <HAL_GPIO_Init+0x1f0>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4a4a      	ldr	r2, [pc, #296]	; (8001c50 <HAL_GPIO_Init+0x2f4>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d00d      	beq.n	8001b48 <HAL_GPIO_Init+0x1ec>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4a49      	ldr	r2, [pc, #292]	; (8001c54 <HAL_GPIO_Init+0x2f8>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d007      	beq.n	8001b44 <HAL_GPIO_Init+0x1e8>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a48      	ldr	r2, [pc, #288]	; (8001c58 <HAL_GPIO_Init+0x2fc>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d101      	bne.n	8001b40 <HAL_GPIO_Init+0x1e4>
 8001b3c:	2305      	movs	r3, #5
 8001b3e:	e00a      	b.n	8001b56 <HAL_GPIO_Init+0x1fa>
 8001b40:	2306      	movs	r3, #6
 8001b42:	e008      	b.n	8001b56 <HAL_GPIO_Init+0x1fa>
 8001b44:	2304      	movs	r3, #4
 8001b46:	e006      	b.n	8001b56 <HAL_GPIO_Init+0x1fa>
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e004      	b.n	8001b56 <HAL_GPIO_Init+0x1fa>
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	e002      	b.n	8001b56 <HAL_GPIO_Init+0x1fa>
 8001b50:	2301      	movs	r3, #1
 8001b52:	e000      	b.n	8001b56 <HAL_GPIO_Init+0x1fa>
 8001b54:	2300      	movs	r3, #0
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	f002 0203 	and.w	r2, r2, #3
 8001b5c:	0092      	lsls	r2, r2, #2
 8001b5e:	4093      	lsls	r3, r2
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b66:	4937      	ldr	r1, [pc, #220]	; (8001c44 <HAL_GPIO_Init+0x2e8>)
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	089b      	lsrs	r3, r3, #2
 8001b6c:	3302      	adds	r3, #2
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b74:	4b39      	ldr	r3, [pc, #228]	; (8001c5c <HAL_GPIO_Init+0x300>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	4013      	ands	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b98:	4a30      	ldr	r2, [pc, #192]	; (8001c5c <HAL_GPIO_Init+0x300>)
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b9e:	4b2f      	ldr	r3, [pc, #188]	; (8001c5c <HAL_GPIO_Init+0x300>)
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	4013      	ands	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bc2:	4a26      	ldr	r2, [pc, #152]	; (8001c5c <HAL_GPIO_Init+0x300>)
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001bc8:	4b24      	ldr	r3, [pc, #144]	; (8001c5c <HAL_GPIO_Init+0x300>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d003      	beq.n	8001bec <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bec:	4a1b      	ldr	r2, [pc, #108]	; (8001c5c <HAL_GPIO_Init+0x300>)
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001bf2:	4b1a      	ldr	r3, [pc, #104]	; (8001c5c <HAL_GPIO_Init+0x300>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c16:	4a11      	ldr	r2, [pc, #68]	; (8001c5c <HAL_GPIO_Init+0x300>)
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	fa22 f303 	lsr.w	r3, r2, r3
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f47f ae9d 	bne.w	800196c <HAL_GPIO_Init+0x10>
  }
}
 8001c32:	bf00      	nop
 8001c34:	bf00      	nop
 8001c36:	371c      	adds	r7, #28
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40010000 	.word	0x40010000
 8001c48:	48000400 	.word	0x48000400
 8001c4c:	48000800 	.word	0x48000800
 8001c50:	48000c00 	.word	0x48000c00
 8001c54:	48001000 	.word	0x48001000
 8001c58:	48001400 	.word	0x48001400
 8001c5c:	40010400 	.word	0x40010400

08001c60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	691a      	ldr	r2, [r3, #16]
 8001c70:	887b      	ldrh	r3, [r7, #2]
 8001c72:	4013      	ands	r3, r2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d002      	beq.n	8001c7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	73fb      	strb	r3, [r7, #15]
 8001c7c:	e001      	b.n	8001c82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3714      	adds	r7, #20
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d141      	bne.n	8001d22 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c9e:	4b4b      	ldr	r3, [pc, #300]	; (8001dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001caa:	d131      	bne.n	8001d10 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001cac:	4b47      	ldr	r3, [pc, #284]	; (8001dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cb2:	4a46      	ldr	r2, [pc, #280]	; (8001dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cb8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cbc:	4b43      	ldr	r3, [pc, #268]	; (8001dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cc4:	4a41      	ldr	r2, [pc, #260]	; (8001dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ccc:	4b40      	ldr	r3, [pc, #256]	; (8001dd0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2232      	movs	r2, #50	; 0x32
 8001cd2:	fb02 f303 	mul.w	r3, r2, r3
 8001cd6:	4a3f      	ldr	r2, [pc, #252]	; (8001dd4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cdc:	0c9b      	lsrs	r3, r3, #18
 8001cde:	3301      	adds	r3, #1
 8001ce0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ce2:	e002      	b.n	8001cea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cea:	4b38      	ldr	r3, [pc, #224]	; (8001dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cf6:	d102      	bne.n	8001cfe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1f2      	bne.n	8001ce4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cfe:	4b33      	ldr	r3, [pc, #204]	; (8001dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d0a:	d158      	bne.n	8001dbe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e057      	b.n	8001dc0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d10:	4b2e      	ldr	r3, [pc, #184]	; (8001dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d16:	4a2d      	ldr	r2, [pc, #180]	; (8001dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d1c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001d20:	e04d      	b.n	8001dbe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d28:	d141      	bne.n	8001dae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d2a:	4b28      	ldr	r3, [pc, #160]	; (8001dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d36:	d131      	bne.n	8001d9c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d38:	4b24      	ldr	r3, [pc, #144]	; (8001dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d3e:	4a23      	ldr	r2, [pc, #140]	; (8001dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d44:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d48:	4b20      	ldr	r3, [pc, #128]	; (8001dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d50:	4a1e      	ldr	r2, [pc, #120]	; (8001dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d56:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d58:	4b1d      	ldr	r3, [pc, #116]	; (8001dd0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2232      	movs	r2, #50	; 0x32
 8001d5e:	fb02 f303 	mul.w	r3, r2, r3
 8001d62:	4a1c      	ldr	r2, [pc, #112]	; (8001dd4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001d64:	fba2 2303 	umull	r2, r3, r2, r3
 8001d68:	0c9b      	lsrs	r3, r3, #18
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d6e:	e002      	b.n	8001d76 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d76:	4b15      	ldr	r3, [pc, #84]	; (8001dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d82:	d102      	bne.n	8001d8a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1f2      	bne.n	8001d70 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d8a:	4b10      	ldr	r3, [pc, #64]	; (8001dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d96:	d112      	bne.n	8001dbe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e011      	b.n	8001dc0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d9c:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001da2:	4a0a      	ldr	r2, [pc, #40]	; (8001dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001da4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001dac:	e007      	b.n	8001dbe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001dae:	4b07      	ldr	r3, [pc, #28]	; (8001dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001db6:	4a05      	ldr	r2, [pc, #20]	; (8001dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001db8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dbc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3714      	adds	r7, #20
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	40007000 	.word	0x40007000
 8001dd0:	20000098 	.word	0x20000098
 8001dd4:	431bde83 	.word	0x431bde83

08001dd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b088      	sub	sp, #32
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e2fe      	b.n	80023e8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d075      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001df6:	4b97      	ldr	r3, [pc, #604]	; (8002054 <HAL_RCC_OscConfig+0x27c>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 030c 	and.w	r3, r3, #12
 8001dfe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e00:	4b94      	ldr	r3, [pc, #592]	; (8002054 <HAL_RCC_OscConfig+0x27c>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	f003 0303 	and.w	r3, r3, #3
 8001e08:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	2b0c      	cmp	r3, #12
 8001e0e:	d102      	bne.n	8001e16 <HAL_RCC_OscConfig+0x3e>
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	2b03      	cmp	r3, #3
 8001e14:	d002      	beq.n	8001e1c <HAL_RCC_OscConfig+0x44>
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	2b08      	cmp	r3, #8
 8001e1a:	d10b      	bne.n	8001e34 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e1c:	4b8d      	ldr	r3, [pc, #564]	; (8002054 <HAL_RCC_OscConfig+0x27c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d05b      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x108>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d157      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e2d9      	b.n	80023e8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e3c:	d106      	bne.n	8001e4c <HAL_RCC_OscConfig+0x74>
 8001e3e:	4b85      	ldr	r3, [pc, #532]	; (8002054 <HAL_RCC_OscConfig+0x27c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a84      	ldr	r2, [pc, #528]	; (8002054 <HAL_RCC_OscConfig+0x27c>)
 8001e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e48:	6013      	str	r3, [r2, #0]
 8001e4a:	e01d      	b.n	8001e88 <HAL_RCC_OscConfig+0xb0>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e54:	d10c      	bne.n	8001e70 <HAL_RCC_OscConfig+0x98>
 8001e56:	4b7f      	ldr	r3, [pc, #508]	; (8002054 <HAL_RCC_OscConfig+0x27c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a7e      	ldr	r2, [pc, #504]	; (8002054 <HAL_RCC_OscConfig+0x27c>)
 8001e5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	4b7c      	ldr	r3, [pc, #496]	; (8002054 <HAL_RCC_OscConfig+0x27c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a7b      	ldr	r2, [pc, #492]	; (8002054 <HAL_RCC_OscConfig+0x27c>)
 8001e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e6c:	6013      	str	r3, [r2, #0]
 8001e6e:	e00b      	b.n	8001e88 <HAL_RCC_OscConfig+0xb0>
 8001e70:	4b78      	ldr	r3, [pc, #480]	; (8002054 <HAL_RCC_OscConfig+0x27c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a77      	ldr	r2, [pc, #476]	; (8002054 <HAL_RCC_OscConfig+0x27c>)
 8001e76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e7a:	6013      	str	r3, [r2, #0]
 8001e7c:	4b75      	ldr	r3, [pc, #468]	; (8002054 <HAL_RCC_OscConfig+0x27c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a74      	ldr	r2, [pc, #464]	; (8002054 <HAL_RCC_OscConfig+0x27c>)
 8001e82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d013      	beq.n	8001eb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e90:	f7ff fc48 	bl	8001724 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e98:	f7ff fc44 	bl	8001724 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b64      	cmp	r3, #100	; 0x64
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e29e      	b.n	80023e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eaa:	4b6a      	ldr	r3, [pc, #424]	; (8002054 <HAL_RCC_OscConfig+0x27c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0f0      	beq.n	8001e98 <HAL_RCC_OscConfig+0xc0>
 8001eb6:	e014      	b.n	8001ee2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb8:	f7ff fc34 	bl	8001724 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ec0:	f7ff fc30 	bl	8001724 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b64      	cmp	r3, #100	; 0x64
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e28a      	b.n	80023e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ed2:	4b60      	ldr	r3, [pc, #384]	; (8002054 <HAL_RCC_OscConfig+0x27c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f0      	bne.n	8001ec0 <HAL_RCC_OscConfig+0xe8>
 8001ede:	e000      	b.n	8001ee2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d075      	beq.n	8001fda <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eee:	4b59      	ldr	r3, [pc, #356]	; (8002054 <HAL_RCC_OscConfig+0x27c>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 030c 	and.w	r3, r3, #12
 8001ef6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ef8:	4b56      	ldr	r3, [pc, #344]	; (8002054 <HAL_RCC_OscConfig+0x27c>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	f003 0303 	and.w	r3, r3, #3
 8001f00:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	2b0c      	cmp	r3, #12
 8001f06:	d102      	bne.n	8001f0e <HAL_RCC_OscConfig+0x136>
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d002      	beq.n	8001f14 <HAL_RCC_OscConfig+0x13c>
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	2b04      	cmp	r3, #4
 8001f12:	d11f      	bne.n	8001f54 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f14:	4b4f      	ldr	r3, [pc, #316]	; (8002054 <HAL_RCC_OscConfig+0x27c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d005      	beq.n	8001f2c <HAL_RCC_OscConfig+0x154>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e25d      	b.n	80023e8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f2c:	4b49      	ldr	r3, [pc, #292]	; (8002054 <HAL_RCC_OscConfig+0x27c>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	061b      	lsls	r3, r3, #24
 8001f3a:	4946      	ldr	r1, [pc, #280]	; (8002054 <HAL_RCC_OscConfig+0x27c>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001f40:	4b45      	ldr	r3, [pc, #276]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff fba1 	bl	800168c <HAL_InitTick>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d043      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e249      	b.n	80023e8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d023      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f5c:	4b3d      	ldr	r3, [pc, #244]	; (8002054 <HAL_RCC_OscConfig+0x27c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a3c      	ldr	r2, [pc, #240]	; (8002054 <HAL_RCC_OscConfig+0x27c>)
 8001f62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f68:	f7ff fbdc 	bl	8001724 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f70:	f7ff fbd8 	bl	8001724 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e232      	b.n	80023e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f82:	4b34      	ldr	r3, [pc, #208]	; (8002054 <HAL_RCC_OscConfig+0x27c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d0f0      	beq.n	8001f70 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f8e:	4b31      	ldr	r3, [pc, #196]	; (8002054 <HAL_RCC_OscConfig+0x27c>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	061b      	lsls	r3, r3, #24
 8001f9c:	492d      	ldr	r1, [pc, #180]	; (8002054 <HAL_RCC_OscConfig+0x27c>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	604b      	str	r3, [r1, #4]
 8001fa2:	e01a      	b.n	8001fda <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fa4:	4b2b      	ldr	r3, [pc, #172]	; (8002054 <HAL_RCC_OscConfig+0x27c>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a2a      	ldr	r2, [pc, #168]	; (8002054 <HAL_RCC_OscConfig+0x27c>)
 8001faa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb0:	f7ff fbb8 	bl	8001724 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fb8:	f7ff fbb4 	bl	8001724 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e20e      	b.n	80023e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fca:	4b22      	ldr	r3, [pc, #136]	; (8002054 <HAL_RCC_OscConfig+0x27c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f0      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x1e0>
 8001fd6:	e000      	b.n	8001fda <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fd8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0308 	and.w	r3, r3, #8
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d041      	beq.n	800206a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d01c      	beq.n	8002028 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fee:	4b19      	ldr	r3, [pc, #100]	; (8002054 <HAL_RCC_OscConfig+0x27c>)
 8001ff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ff4:	4a17      	ldr	r2, [pc, #92]	; (8002054 <HAL_RCC_OscConfig+0x27c>)
 8001ff6:	f043 0301 	orr.w	r3, r3, #1
 8001ffa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ffe:	f7ff fb91 	bl	8001724 <HAL_GetTick>
 8002002:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002004:	e008      	b.n	8002018 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002006:	f7ff fb8d 	bl	8001724 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e1e7      	b.n	80023e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002018:	4b0e      	ldr	r3, [pc, #56]	; (8002054 <HAL_RCC_OscConfig+0x27c>)
 800201a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d0ef      	beq.n	8002006 <HAL_RCC_OscConfig+0x22e>
 8002026:	e020      	b.n	800206a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002028:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <HAL_RCC_OscConfig+0x27c>)
 800202a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800202e:	4a09      	ldr	r2, [pc, #36]	; (8002054 <HAL_RCC_OscConfig+0x27c>)
 8002030:	f023 0301 	bic.w	r3, r3, #1
 8002034:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002038:	f7ff fb74 	bl	8001724 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800203e:	e00d      	b.n	800205c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002040:	f7ff fb70 	bl	8001724 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d906      	bls.n	800205c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e1ca      	b.n	80023e8 <HAL_RCC_OscConfig+0x610>
 8002052:	bf00      	nop
 8002054:	40021000 	.word	0x40021000
 8002058:	200000b8 	.word	0x200000b8
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800205c:	4b8c      	ldr	r3, [pc, #560]	; (8002290 <HAL_RCC_OscConfig+0x4b8>)
 800205e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1ea      	bne.n	8002040 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0304 	and.w	r3, r3, #4
 8002072:	2b00      	cmp	r3, #0
 8002074:	f000 80a6 	beq.w	80021c4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002078:	2300      	movs	r3, #0
 800207a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800207c:	4b84      	ldr	r3, [pc, #528]	; (8002290 <HAL_RCC_OscConfig+0x4b8>)
 800207e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <HAL_RCC_OscConfig+0x2b4>
 8002088:	2301      	movs	r3, #1
 800208a:	e000      	b.n	800208e <HAL_RCC_OscConfig+0x2b6>
 800208c:	2300      	movs	r3, #0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00d      	beq.n	80020ae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002092:	4b7f      	ldr	r3, [pc, #508]	; (8002290 <HAL_RCC_OscConfig+0x4b8>)
 8002094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002096:	4a7e      	ldr	r2, [pc, #504]	; (8002290 <HAL_RCC_OscConfig+0x4b8>)
 8002098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800209c:	6593      	str	r3, [r2, #88]	; 0x58
 800209e:	4b7c      	ldr	r3, [pc, #496]	; (8002290 <HAL_RCC_OscConfig+0x4b8>)
 80020a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80020aa:	2301      	movs	r3, #1
 80020ac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020ae:	4b79      	ldr	r3, [pc, #484]	; (8002294 <HAL_RCC_OscConfig+0x4bc>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d118      	bne.n	80020ec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020ba:	4b76      	ldr	r3, [pc, #472]	; (8002294 <HAL_RCC_OscConfig+0x4bc>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a75      	ldr	r2, [pc, #468]	; (8002294 <HAL_RCC_OscConfig+0x4bc>)
 80020c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020c6:	f7ff fb2d 	bl	8001724 <HAL_GetTick>
 80020ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020cc:	e008      	b.n	80020e0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ce:	f7ff fb29 	bl	8001724 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d901      	bls.n	80020e0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e183      	b.n	80023e8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020e0:	4b6c      	ldr	r3, [pc, #432]	; (8002294 <HAL_RCC_OscConfig+0x4bc>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d0f0      	beq.n	80020ce <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d108      	bne.n	8002106 <HAL_RCC_OscConfig+0x32e>
 80020f4:	4b66      	ldr	r3, [pc, #408]	; (8002290 <HAL_RCC_OscConfig+0x4b8>)
 80020f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fa:	4a65      	ldr	r2, [pc, #404]	; (8002290 <HAL_RCC_OscConfig+0x4b8>)
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002104:	e024      	b.n	8002150 <HAL_RCC_OscConfig+0x378>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	2b05      	cmp	r3, #5
 800210c:	d110      	bne.n	8002130 <HAL_RCC_OscConfig+0x358>
 800210e:	4b60      	ldr	r3, [pc, #384]	; (8002290 <HAL_RCC_OscConfig+0x4b8>)
 8002110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002114:	4a5e      	ldr	r2, [pc, #376]	; (8002290 <HAL_RCC_OscConfig+0x4b8>)
 8002116:	f043 0304 	orr.w	r3, r3, #4
 800211a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800211e:	4b5c      	ldr	r3, [pc, #368]	; (8002290 <HAL_RCC_OscConfig+0x4b8>)
 8002120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002124:	4a5a      	ldr	r2, [pc, #360]	; (8002290 <HAL_RCC_OscConfig+0x4b8>)
 8002126:	f043 0301 	orr.w	r3, r3, #1
 800212a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800212e:	e00f      	b.n	8002150 <HAL_RCC_OscConfig+0x378>
 8002130:	4b57      	ldr	r3, [pc, #348]	; (8002290 <HAL_RCC_OscConfig+0x4b8>)
 8002132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002136:	4a56      	ldr	r2, [pc, #344]	; (8002290 <HAL_RCC_OscConfig+0x4b8>)
 8002138:	f023 0301 	bic.w	r3, r3, #1
 800213c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002140:	4b53      	ldr	r3, [pc, #332]	; (8002290 <HAL_RCC_OscConfig+0x4b8>)
 8002142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002146:	4a52      	ldr	r2, [pc, #328]	; (8002290 <HAL_RCC_OscConfig+0x4b8>)
 8002148:	f023 0304 	bic.w	r3, r3, #4
 800214c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d016      	beq.n	8002186 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002158:	f7ff fae4 	bl	8001724 <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800215e:	e00a      	b.n	8002176 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002160:	f7ff fae0 	bl	8001724 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	f241 3288 	movw	r2, #5000	; 0x1388
 800216e:	4293      	cmp	r3, r2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e138      	b.n	80023e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002176:	4b46      	ldr	r3, [pc, #280]	; (8002290 <HAL_RCC_OscConfig+0x4b8>)
 8002178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d0ed      	beq.n	8002160 <HAL_RCC_OscConfig+0x388>
 8002184:	e015      	b.n	80021b2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002186:	f7ff facd 	bl	8001724 <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800218c:	e00a      	b.n	80021a4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800218e:	f7ff fac9 	bl	8001724 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	f241 3288 	movw	r2, #5000	; 0x1388
 800219c:	4293      	cmp	r3, r2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e121      	b.n	80023e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021a4:	4b3a      	ldr	r3, [pc, #232]	; (8002290 <HAL_RCC_OscConfig+0x4b8>)
 80021a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1ed      	bne.n	800218e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021b2:	7ffb      	ldrb	r3, [r7, #31]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d105      	bne.n	80021c4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021b8:	4b35      	ldr	r3, [pc, #212]	; (8002290 <HAL_RCC_OscConfig+0x4b8>)
 80021ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021bc:	4a34      	ldr	r2, [pc, #208]	; (8002290 <HAL_RCC_OscConfig+0x4b8>)
 80021be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021c2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0320 	and.w	r3, r3, #32
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d03c      	beq.n	800224a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d01c      	beq.n	8002212 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80021d8:	4b2d      	ldr	r3, [pc, #180]	; (8002290 <HAL_RCC_OscConfig+0x4b8>)
 80021da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021de:	4a2c      	ldr	r2, [pc, #176]	; (8002290 <HAL_RCC_OscConfig+0x4b8>)
 80021e0:	f043 0301 	orr.w	r3, r3, #1
 80021e4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e8:	f7ff fa9c 	bl	8001724 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021f0:	f7ff fa98 	bl	8001724 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e0f2      	b.n	80023e8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002202:	4b23      	ldr	r3, [pc, #140]	; (8002290 <HAL_RCC_OscConfig+0x4b8>)
 8002204:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d0ef      	beq.n	80021f0 <HAL_RCC_OscConfig+0x418>
 8002210:	e01b      	b.n	800224a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002212:	4b1f      	ldr	r3, [pc, #124]	; (8002290 <HAL_RCC_OscConfig+0x4b8>)
 8002214:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002218:	4a1d      	ldr	r2, [pc, #116]	; (8002290 <HAL_RCC_OscConfig+0x4b8>)
 800221a:	f023 0301 	bic.w	r3, r3, #1
 800221e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002222:	f7ff fa7f 	bl	8001724 <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002228:	e008      	b.n	800223c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800222a:	f7ff fa7b 	bl	8001724 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e0d5      	b.n	80023e8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800223c:	4b14      	ldr	r3, [pc, #80]	; (8002290 <HAL_RCC_OscConfig+0x4b8>)
 800223e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1ef      	bne.n	800222a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	2b00      	cmp	r3, #0
 8002250:	f000 80c9 	beq.w	80023e6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002254:	4b0e      	ldr	r3, [pc, #56]	; (8002290 <HAL_RCC_OscConfig+0x4b8>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 030c 	and.w	r3, r3, #12
 800225c:	2b0c      	cmp	r3, #12
 800225e:	f000 8083 	beq.w	8002368 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	2b02      	cmp	r3, #2
 8002268:	d15e      	bne.n	8002328 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800226a:	4b09      	ldr	r3, [pc, #36]	; (8002290 <HAL_RCC_OscConfig+0x4b8>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a08      	ldr	r2, [pc, #32]	; (8002290 <HAL_RCC_OscConfig+0x4b8>)
 8002270:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002274:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002276:	f7ff fa55 	bl	8001724 <HAL_GetTick>
 800227a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800227c:	e00c      	b.n	8002298 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800227e:	f7ff fa51 	bl	8001724 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d905      	bls.n	8002298 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e0ab      	b.n	80023e8 <HAL_RCC_OscConfig+0x610>
 8002290:	40021000 	.word	0x40021000
 8002294:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002298:	4b55      	ldr	r3, [pc, #340]	; (80023f0 <HAL_RCC_OscConfig+0x618>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1ec      	bne.n	800227e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022a4:	4b52      	ldr	r3, [pc, #328]	; (80023f0 <HAL_RCC_OscConfig+0x618>)
 80022a6:	68da      	ldr	r2, [r3, #12]
 80022a8:	4b52      	ldr	r3, [pc, #328]	; (80023f4 <HAL_RCC_OscConfig+0x61c>)
 80022aa:	4013      	ands	r3, r2
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6a11      	ldr	r1, [r2, #32]
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022b4:	3a01      	subs	r2, #1
 80022b6:	0112      	lsls	r2, r2, #4
 80022b8:	4311      	orrs	r1, r2
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80022be:	0212      	lsls	r2, r2, #8
 80022c0:	4311      	orrs	r1, r2
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80022c6:	0852      	lsrs	r2, r2, #1
 80022c8:	3a01      	subs	r2, #1
 80022ca:	0552      	lsls	r2, r2, #21
 80022cc:	4311      	orrs	r1, r2
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022d2:	0852      	lsrs	r2, r2, #1
 80022d4:	3a01      	subs	r2, #1
 80022d6:	0652      	lsls	r2, r2, #25
 80022d8:	4311      	orrs	r1, r2
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80022de:	06d2      	lsls	r2, r2, #27
 80022e0:	430a      	orrs	r2, r1
 80022e2:	4943      	ldr	r1, [pc, #268]	; (80023f0 <HAL_RCC_OscConfig+0x618>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022e8:	4b41      	ldr	r3, [pc, #260]	; (80023f0 <HAL_RCC_OscConfig+0x618>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a40      	ldr	r2, [pc, #256]	; (80023f0 <HAL_RCC_OscConfig+0x618>)
 80022ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022f2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022f4:	4b3e      	ldr	r3, [pc, #248]	; (80023f0 <HAL_RCC_OscConfig+0x618>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	4a3d      	ldr	r2, [pc, #244]	; (80023f0 <HAL_RCC_OscConfig+0x618>)
 80022fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022fe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002300:	f7ff fa10 	bl	8001724 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002308:	f7ff fa0c 	bl	8001724 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e066      	b.n	80023e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800231a:	4b35      	ldr	r3, [pc, #212]	; (80023f0 <HAL_RCC_OscConfig+0x618>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d0f0      	beq.n	8002308 <HAL_RCC_OscConfig+0x530>
 8002326:	e05e      	b.n	80023e6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002328:	4b31      	ldr	r3, [pc, #196]	; (80023f0 <HAL_RCC_OscConfig+0x618>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a30      	ldr	r2, [pc, #192]	; (80023f0 <HAL_RCC_OscConfig+0x618>)
 800232e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002332:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002334:	f7ff f9f6 	bl	8001724 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800233c:	f7ff f9f2 	bl	8001724 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e04c      	b.n	80023e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800234e:	4b28      	ldr	r3, [pc, #160]	; (80023f0 <HAL_RCC_OscConfig+0x618>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f0      	bne.n	800233c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800235a:	4b25      	ldr	r3, [pc, #148]	; (80023f0 <HAL_RCC_OscConfig+0x618>)
 800235c:	68da      	ldr	r2, [r3, #12]
 800235e:	4924      	ldr	r1, [pc, #144]	; (80023f0 <HAL_RCC_OscConfig+0x618>)
 8002360:	4b25      	ldr	r3, [pc, #148]	; (80023f8 <HAL_RCC_OscConfig+0x620>)
 8002362:	4013      	ands	r3, r2
 8002364:	60cb      	str	r3, [r1, #12]
 8002366:	e03e      	b.n	80023e6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	69db      	ldr	r3, [r3, #28]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d101      	bne.n	8002374 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e039      	b.n	80023e8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002374:	4b1e      	ldr	r3, [pc, #120]	; (80023f0 <HAL_RCC_OscConfig+0x618>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	f003 0203 	and.w	r2, r3, #3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	429a      	cmp	r2, r3
 8002386:	d12c      	bne.n	80023e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002392:	3b01      	subs	r3, #1
 8002394:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002396:	429a      	cmp	r2, r3
 8002398:	d123      	bne.n	80023e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d11b      	bne.n	80023e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d113      	bne.n	80023e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c4:	085b      	lsrs	r3, r3, #1
 80023c6:	3b01      	subs	r3, #1
 80023c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d109      	bne.n	80023e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d8:	085b      	lsrs	r3, r3, #1
 80023da:	3b01      	subs	r3, #1
 80023dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023de:	429a      	cmp	r2, r3
 80023e0:	d001      	beq.n	80023e6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3720      	adds	r7, #32
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40021000 	.word	0x40021000
 80023f4:	019f800c 	.word	0x019f800c
 80023f8:	feeefffc 	.word	0xfeeefffc

080023fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002406:	2300      	movs	r3, #0
 8002408:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d101      	bne.n	8002414 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e11e      	b.n	8002652 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002414:	4b91      	ldr	r3, [pc, #580]	; (800265c <HAL_RCC_ClockConfig+0x260>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 030f 	and.w	r3, r3, #15
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	429a      	cmp	r2, r3
 8002420:	d910      	bls.n	8002444 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002422:	4b8e      	ldr	r3, [pc, #568]	; (800265c <HAL_RCC_ClockConfig+0x260>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f023 020f 	bic.w	r2, r3, #15
 800242a:	498c      	ldr	r1, [pc, #560]	; (800265c <HAL_RCC_ClockConfig+0x260>)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	4313      	orrs	r3, r2
 8002430:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002432:	4b8a      	ldr	r3, [pc, #552]	; (800265c <HAL_RCC_ClockConfig+0x260>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	429a      	cmp	r2, r3
 800243e:	d001      	beq.n	8002444 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e106      	b.n	8002652 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	2b00      	cmp	r3, #0
 800244e:	d073      	beq.n	8002538 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	2b03      	cmp	r3, #3
 8002456:	d129      	bne.n	80024ac <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002458:	4b81      	ldr	r3, [pc, #516]	; (8002660 <HAL_RCC_ClockConfig+0x264>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d101      	bne.n	8002468 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e0f4      	b.n	8002652 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002468:	f000 f966 	bl	8002738 <RCC_GetSysClockFreqFromPLLSource>
 800246c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	4a7c      	ldr	r2, [pc, #496]	; (8002664 <HAL_RCC_ClockConfig+0x268>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d93f      	bls.n	80024f6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002476:	4b7a      	ldr	r3, [pc, #488]	; (8002660 <HAL_RCC_ClockConfig+0x264>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d009      	beq.n	8002496 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800248a:	2b00      	cmp	r3, #0
 800248c:	d033      	beq.n	80024f6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002492:	2b00      	cmp	r3, #0
 8002494:	d12f      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002496:	4b72      	ldr	r3, [pc, #456]	; (8002660 <HAL_RCC_ClockConfig+0x264>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800249e:	4a70      	ldr	r2, [pc, #448]	; (8002660 <HAL_RCC_ClockConfig+0x264>)
 80024a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024a4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80024a6:	2380      	movs	r3, #128	; 0x80
 80024a8:	617b      	str	r3, [r7, #20]
 80024aa:	e024      	b.n	80024f6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d107      	bne.n	80024c4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024b4:	4b6a      	ldr	r3, [pc, #424]	; (8002660 <HAL_RCC_ClockConfig+0x264>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d109      	bne.n	80024d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e0c6      	b.n	8002652 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024c4:	4b66      	ldr	r3, [pc, #408]	; (8002660 <HAL_RCC_ClockConfig+0x264>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d101      	bne.n	80024d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e0be      	b.n	8002652 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80024d4:	f000 f8ce 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 80024d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	4a61      	ldr	r2, [pc, #388]	; (8002664 <HAL_RCC_ClockConfig+0x268>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d909      	bls.n	80024f6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80024e2:	4b5f      	ldr	r3, [pc, #380]	; (8002660 <HAL_RCC_ClockConfig+0x264>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024ea:	4a5d      	ldr	r2, [pc, #372]	; (8002660 <HAL_RCC_ClockConfig+0x264>)
 80024ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024f0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80024f2:	2380      	movs	r3, #128	; 0x80
 80024f4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024f6:	4b5a      	ldr	r3, [pc, #360]	; (8002660 <HAL_RCC_ClockConfig+0x264>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f023 0203 	bic.w	r2, r3, #3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	4957      	ldr	r1, [pc, #348]	; (8002660 <HAL_RCC_ClockConfig+0x264>)
 8002504:	4313      	orrs	r3, r2
 8002506:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002508:	f7ff f90c 	bl	8001724 <HAL_GetTick>
 800250c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800250e:	e00a      	b.n	8002526 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002510:	f7ff f908 	bl	8001724 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	f241 3288 	movw	r2, #5000	; 0x1388
 800251e:	4293      	cmp	r3, r2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e095      	b.n	8002652 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002526:	4b4e      	ldr	r3, [pc, #312]	; (8002660 <HAL_RCC_ClockConfig+0x264>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 020c 	and.w	r2, r3, #12
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	429a      	cmp	r2, r3
 8002536:	d1eb      	bne.n	8002510 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d023      	beq.n	800258c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	2b00      	cmp	r3, #0
 800254e:	d005      	beq.n	800255c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002550:	4b43      	ldr	r3, [pc, #268]	; (8002660 <HAL_RCC_ClockConfig+0x264>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	4a42      	ldr	r2, [pc, #264]	; (8002660 <HAL_RCC_ClockConfig+0x264>)
 8002556:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800255a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0308 	and.w	r3, r3, #8
 8002564:	2b00      	cmp	r3, #0
 8002566:	d007      	beq.n	8002578 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002568:	4b3d      	ldr	r3, [pc, #244]	; (8002660 <HAL_RCC_ClockConfig+0x264>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002570:	4a3b      	ldr	r2, [pc, #236]	; (8002660 <HAL_RCC_ClockConfig+0x264>)
 8002572:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002576:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002578:	4b39      	ldr	r3, [pc, #228]	; (8002660 <HAL_RCC_ClockConfig+0x264>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	4936      	ldr	r1, [pc, #216]	; (8002660 <HAL_RCC_ClockConfig+0x264>)
 8002586:	4313      	orrs	r3, r2
 8002588:	608b      	str	r3, [r1, #8]
 800258a:	e008      	b.n	800259e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	2b80      	cmp	r3, #128	; 0x80
 8002590:	d105      	bne.n	800259e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002592:	4b33      	ldr	r3, [pc, #204]	; (8002660 <HAL_RCC_ClockConfig+0x264>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	4a32      	ldr	r2, [pc, #200]	; (8002660 <HAL_RCC_ClockConfig+0x264>)
 8002598:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800259c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800259e:	4b2f      	ldr	r3, [pc, #188]	; (800265c <HAL_RCC_ClockConfig+0x260>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 030f 	and.w	r3, r3, #15
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d21d      	bcs.n	80025e8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ac:	4b2b      	ldr	r3, [pc, #172]	; (800265c <HAL_RCC_ClockConfig+0x260>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f023 020f 	bic.w	r2, r3, #15
 80025b4:	4929      	ldr	r1, [pc, #164]	; (800265c <HAL_RCC_ClockConfig+0x260>)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80025bc:	f7ff f8b2 	bl	8001724 <HAL_GetTick>
 80025c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c2:	e00a      	b.n	80025da <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025c4:	f7ff f8ae 	bl	8001724 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e03b      	b.n	8002652 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025da:	4b20      	ldr	r3, [pc, #128]	; (800265c <HAL_RCC_ClockConfig+0x260>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 030f 	and.w	r3, r3, #15
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d1ed      	bne.n	80025c4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d008      	beq.n	8002606 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025f4:	4b1a      	ldr	r3, [pc, #104]	; (8002660 <HAL_RCC_ClockConfig+0x264>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	4917      	ldr	r1, [pc, #92]	; (8002660 <HAL_RCC_ClockConfig+0x264>)
 8002602:	4313      	orrs	r3, r2
 8002604:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0308 	and.w	r3, r3, #8
 800260e:	2b00      	cmp	r3, #0
 8002610:	d009      	beq.n	8002626 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002612:	4b13      	ldr	r3, [pc, #76]	; (8002660 <HAL_RCC_ClockConfig+0x264>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	490f      	ldr	r1, [pc, #60]	; (8002660 <HAL_RCC_ClockConfig+0x264>)
 8002622:	4313      	orrs	r3, r2
 8002624:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002626:	f000 f825 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 800262a:	4602      	mov	r2, r0
 800262c:	4b0c      	ldr	r3, [pc, #48]	; (8002660 <HAL_RCC_ClockConfig+0x264>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	091b      	lsrs	r3, r3, #4
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	490c      	ldr	r1, [pc, #48]	; (8002668 <HAL_RCC_ClockConfig+0x26c>)
 8002638:	5ccb      	ldrb	r3, [r1, r3]
 800263a:	f003 031f 	and.w	r3, r3, #31
 800263e:	fa22 f303 	lsr.w	r3, r2, r3
 8002642:	4a0a      	ldr	r2, [pc, #40]	; (800266c <HAL_RCC_ClockConfig+0x270>)
 8002644:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002646:	4b0a      	ldr	r3, [pc, #40]	; (8002670 <HAL_RCC_ClockConfig+0x274>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff f81e 	bl	800168c <HAL_InitTick>
 8002650:	4603      	mov	r3, r0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3718      	adds	r7, #24
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	40022000 	.word	0x40022000
 8002660:	40021000 	.word	0x40021000
 8002664:	04c4b400 	.word	0x04c4b400
 8002668:	08003a0c 	.word	0x08003a0c
 800266c:	20000098 	.word	0x20000098
 8002670:	200000b8 	.word	0x200000b8

08002674 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002674:	b480      	push	{r7}
 8002676:	b087      	sub	sp, #28
 8002678:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800267a:	4b2c      	ldr	r3, [pc, #176]	; (800272c <HAL_RCC_GetSysClockFreq+0xb8>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 030c 	and.w	r3, r3, #12
 8002682:	2b04      	cmp	r3, #4
 8002684:	d102      	bne.n	800268c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002686:	4b2a      	ldr	r3, [pc, #168]	; (8002730 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002688:	613b      	str	r3, [r7, #16]
 800268a:	e047      	b.n	800271c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800268c:	4b27      	ldr	r3, [pc, #156]	; (800272c <HAL_RCC_GetSysClockFreq+0xb8>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f003 030c 	and.w	r3, r3, #12
 8002694:	2b08      	cmp	r3, #8
 8002696:	d102      	bne.n	800269e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002698:	4b26      	ldr	r3, [pc, #152]	; (8002734 <HAL_RCC_GetSysClockFreq+0xc0>)
 800269a:	613b      	str	r3, [r7, #16]
 800269c:	e03e      	b.n	800271c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800269e:	4b23      	ldr	r3, [pc, #140]	; (800272c <HAL_RCC_GetSysClockFreq+0xb8>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 030c 	and.w	r3, r3, #12
 80026a6:	2b0c      	cmp	r3, #12
 80026a8:	d136      	bne.n	8002718 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026aa:	4b20      	ldr	r3, [pc, #128]	; (800272c <HAL_RCC_GetSysClockFreq+0xb8>)
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	f003 0303 	and.w	r3, r3, #3
 80026b2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026b4:	4b1d      	ldr	r3, [pc, #116]	; (800272c <HAL_RCC_GetSysClockFreq+0xb8>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	091b      	lsrs	r3, r3, #4
 80026ba:	f003 030f 	and.w	r3, r3, #15
 80026be:	3301      	adds	r3, #1
 80026c0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2b03      	cmp	r3, #3
 80026c6:	d10c      	bne.n	80026e2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026c8:	4a1a      	ldr	r2, [pc, #104]	; (8002734 <HAL_RCC_GetSysClockFreq+0xc0>)
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d0:	4a16      	ldr	r2, [pc, #88]	; (800272c <HAL_RCC_GetSysClockFreq+0xb8>)
 80026d2:	68d2      	ldr	r2, [r2, #12]
 80026d4:	0a12      	lsrs	r2, r2, #8
 80026d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80026da:	fb02 f303 	mul.w	r3, r2, r3
 80026de:	617b      	str	r3, [r7, #20]
      break;
 80026e0:	e00c      	b.n	80026fc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026e2:	4a13      	ldr	r2, [pc, #76]	; (8002730 <HAL_RCC_GetSysClockFreq+0xbc>)
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ea:	4a10      	ldr	r2, [pc, #64]	; (800272c <HAL_RCC_GetSysClockFreq+0xb8>)
 80026ec:	68d2      	ldr	r2, [r2, #12]
 80026ee:	0a12      	lsrs	r2, r2, #8
 80026f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80026f4:	fb02 f303 	mul.w	r3, r2, r3
 80026f8:	617b      	str	r3, [r7, #20]
      break;
 80026fa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026fc:	4b0b      	ldr	r3, [pc, #44]	; (800272c <HAL_RCC_GetSysClockFreq+0xb8>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	0e5b      	lsrs	r3, r3, #25
 8002702:	f003 0303 	and.w	r3, r3, #3
 8002706:	3301      	adds	r3, #1
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	fbb2 f3f3 	udiv	r3, r2, r3
 8002714:	613b      	str	r3, [r7, #16]
 8002716:	e001      	b.n	800271c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002718:	2300      	movs	r3, #0
 800271a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800271c:	693b      	ldr	r3, [r7, #16]
}
 800271e:	4618      	mov	r0, r3
 8002720:	371c      	adds	r7, #28
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	40021000 	.word	0x40021000
 8002730:	00f42400 	.word	0x00f42400
 8002734:	007a1200 	.word	0x007a1200

08002738 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002738:	b480      	push	{r7}
 800273a:	b087      	sub	sp, #28
 800273c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800273e:	4b1e      	ldr	r3, [pc, #120]	; (80027b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	f003 0303 	and.w	r3, r3, #3
 8002746:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002748:	4b1b      	ldr	r3, [pc, #108]	; (80027b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	091b      	lsrs	r3, r3, #4
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	3301      	adds	r3, #1
 8002754:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	2b03      	cmp	r3, #3
 800275a:	d10c      	bne.n	8002776 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800275c:	4a17      	ldr	r2, [pc, #92]	; (80027bc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	fbb2 f3f3 	udiv	r3, r2, r3
 8002764:	4a14      	ldr	r2, [pc, #80]	; (80027b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002766:	68d2      	ldr	r2, [r2, #12]
 8002768:	0a12      	lsrs	r2, r2, #8
 800276a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800276e:	fb02 f303 	mul.w	r3, r2, r3
 8002772:	617b      	str	r3, [r7, #20]
    break;
 8002774:	e00c      	b.n	8002790 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002776:	4a12      	ldr	r2, [pc, #72]	; (80027c0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	fbb2 f3f3 	udiv	r3, r2, r3
 800277e:	4a0e      	ldr	r2, [pc, #56]	; (80027b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002780:	68d2      	ldr	r2, [r2, #12]
 8002782:	0a12      	lsrs	r2, r2, #8
 8002784:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002788:	fb02 f303 	mul.w	r3, r2, r3
 800278c:	617b      	str	r3, [r7, #20]
    break;
 800278e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002790:	4b09      	ldr	r3, [pc, #36]	; (80027b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	0e5b      	lsrs	r3, r3, #25
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	3301      	adds	r3, #1
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80027a0:	697a      	ldr	r2, [r7, #20]
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80027aa:	687b      	ldr	r3, [r7, #4]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	371c      	adds	r7, #28
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	40021000 	.word	0x40021000
 80027bc:	007a1200 	.word	0x007a1200
 80027c0:	00f42400 	.word	0x00f42400

080027c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e049      	b.n	800286a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d106      	bne.n	80027f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7fe fd74 	bl	80012d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2202      	movs	r2, #2
 80027f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	3304      	adds	r3, #4
 8002800:	4619      	mov	r1, r3
 8002802:	4610      	mov	r0, r2
 8002804:	f000 f9ac 	bl	8002b60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b084      	sub	sp, #16
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d020      	beq.n	80028d6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d01b      	beq.n	80028d6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f06f 0202 	mvn.w	r2, #2
 80028a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	f003 0303 	and.w	r3, r3, #3
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 f931 	bl	8002b24 <HAL_TIM_IC_CaptureCallback>
 80028c2:	e005      	b.n	80028d0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 f923 	bl	8002b10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 f934 	bl	8002b38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	f003 0304 	and.w	r3, r3, #4
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d020      	beq.n	8002922 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f003 0304 	and.w	r3, r3, #4
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d01b      	beq.n	8002922 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f06f 0204 	mvn.w	r2, #4
 80028f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2202      	movs	r2, #2
 80028f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002904:	2b00      	cmp	r3, #0
 8002906:	d003      	beq.n	8002910 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 f90b 	bl	8002b24 <HAL_TIM_IC_CaptureCallback>
 800290e:	e005      	b.n	800291c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 f8fd 	bl	8002b10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 f90e 	bl	8002b38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	f003 0308 	and.w	r3, r3, #8
 8002928:	2b00      	cmp	r3, #0
 800292a:	d020      	beq.n	800296e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f003 0308 	and.w	r3, r3, #8
 8002932:	2b00      	cmp	r3, #0
 8002934:	d01b      	beq.n	800296e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f06f 0208 	mvn.w	r2, #8
 800293e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2204      	movs	r2, #4
 8002944:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	69db      	ldr	r3, [r3, #28]
 800294c:	f003 0303 	and.w	r3, r3, #3
 8002950:	2b00      	cmp	r3, #0
 8002952:	d003      	beq.n	800295c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 f8e5 	bl	8002b24 <HAL_TIM_IC_CaptureCallback>
 800295a:	e005      	b.n	8002968 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 f8d7 	bl	8002b10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 f8e8 	bl	8002b38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	f003 0310 	and.w	r3, r3, #16
 8002974:	2b00      	cmp	r3, #0
 8002976:	d020      	beq.n	80029ba <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f003 0310 	and.w	r3, r3, #16
 800297e:	2b00      	cmp	r3, #0
 8002980:	d01b      	beq.n	80029ba <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f06f 0210 	mvn.w	r2, #16
 800298a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2208      	movs	r2, #8
 8002990:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	69db      	ldr	r3, [r3, #28]
 8002998:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800299c:	2b00      	cmp	r3, #0
 800299e:	d003      	beq.n	80029a8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 f8bf 	bl	8002b24 <HAL_TIM_IC_CaptureCallback>
 80029a6:	e005      	b.n	80029b4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 f8b1 	bl	8002b10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f8c2 	bl	8002b38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00c      	beq.n	80029de <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d007      	beq.n	80029de <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f06f 0201 	mvn.w	r2, #1
 80029d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f7fe fd15 	bl	8001408 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d104      	bne.n	80029f2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00c      	beq.n	8002a0c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d007      	beq.n	8002a0c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8002a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f9ec 	bl	8002de4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00c      	beq.n	8002a30 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d007      	beq.n	8002a30 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f9e4 	bl	8002df8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00c      	beq.n	8002a54 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d007      	beq.n	8002a54 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 f87c 	bl	8002b4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	f003 0320 	and.w	r3, r3, #32
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00c      	beq.n	8002a78 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f003 0320 	and.w	r3, r3, #32
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d007      	beq.n	8002a78 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f06f 0220 	mvn.w	r2, #32
 8002a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f9ac 	bl	8002dd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00c      	beq.n	8002a9c <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d007      	beq.n	8002a9c <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8002a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 f9b8 	bl	8002e0c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00c      	beq.n	8002ac0 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d007      	beq.n	8002ac0 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8002ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f9b0 	bl	8002e20 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00c      	beq.n	8002ae4 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d007      	beq.n	8002ae4 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8002adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f9a8 	bl	8002e34 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00c      	beq.n	8002b08 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d007      	beq.n	8002b08 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8002b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f9a0 	bl	8002e48 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b08:	bf00      	nop
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a48      	ldr	r2, [pc, #288]	; (8002c94 <TIM_Base_SetConfig+0x134>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d013      	beq.n	8002ba0 <TIM_Base_SetConfig+0x40>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b7e:	d00f      	beq.n	8002ba0 <TIM_Base_SetConfig+0x40>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a45      	ldr	r2, [pc, #276]	; (8002c98 <TIM_Base_SetConfig+0x138>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d00b      	beq.n	8002ba0 <TIM_Base_SetConfig+0x40>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a44      	ldr	r2, [pc, #272]	; (8002c9c <TIM_Base_SetConfig+0x13c>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d007      	beq.n	8002ba0 <TIM_Base_SetConfig+0x40>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a43      	ldr	r2, [pc, #268]	; (8002ca0 <TIM_Base_SetConfig+0x140>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d003      	beq.n	8002ba0 <TIM_Base_SetConfig+0x40>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a42      	ldr	r2, [pc, #264]	; (8002ca4 <TIM_Base_SetConfig+0x144>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d108      	bne.n	8002bb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ba6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a37      	ldr	r2, [pc, #220]	; (8002c94 <TIM_Base_SetConfig+0x134>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d01f      	beq.n	8002bfa <TIM_Base_SetConfig+0x9a>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bc0:	d01b      	beq.n	8002bfa <TIM_Base_SetConfig+0x9a>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a34      	ldr	r2, [pc, #208]	; (8002c98 <TIM_Base_SetConfig+0x138>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d017      	beq.n	8002bfa <TIM_Base_SetConfig+0x9a>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a33      	ldr	r2, [pc, #204]	; (8002c9c <TIM_Base_SetConfig+0x13c>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d013      	beq.n	8002bfa <TIM_Base_SetConfig+0x9a>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a32      	ldr	r2, [pc, #200]	; (8002ca0 <TIM_Base_SetConfig+0x140>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d00f      	beq.n	8002bfa <TIM_Base_SetConfig+0x9a>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a32      	ldr	r2, [pc, #200]	; (8002ca8 <TIM_Base_SetConfig+0x148>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d00b      	beq.n	8002bfa <TIM_Base_SetConfig+0x9a>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a31      	ldr	r2, [pc, #196]	; (8002cac <TIM_Base_SetConfig+0x14c>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d007      	beq.n	8002bfa <TIM_Base_SetConfig+0x9a>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a30      	ldr	r2, [pc, #192]	; (8002cb0 <TIM_Base_SetConfig+0x150>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d003      	beq.n	8002bfa <TIM_Base_SetConfig+0x9a>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a2b      	ldr	r2, [pc, #172]	; (8002ca4 <TIM_Base_SetConfig+0x144>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d108      	bne.n	8002c0c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a18      	ldr	r2, [pc, #96]	; (8002c94 <TIM_Base_SetConfig+0x134>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d013      	beq.n	8002c60 <TIM_Base_SetConfig+0x100>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a19      	ldr	r2, [pc, #100]	; (8002ca0 <TIM_Base_SetConfig+0x140>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d00f      	beq.n	8002c60 <TIM_Base_SetConfig+0x100>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a19      	ldr	r2, [pc, #100]	; (8002ca8 <TIM_Base_SetConfig+0x148>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d00b      	beq.n	8002c60 <TIM_Base_SetConfig+0x100>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a18      	ldr	r2, [pc, #96]	; (8002cac <TIM_Base_SetConfig+0x14c>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d007      	beq.n	8002c60 <TIM_Base_SetConfig+0x100>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a17      	ldr	r2, [pc, #92]	; (8002cb0 <TIM_Base_SetConfig+0x150>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d003      	beq.n	8002c60 <TIM_Base_SetConfig+0x100>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a12      	ldr	r2, [pc, #72]	; (8002ca4 <TIM_Base_SetConfig+0x144>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d103      	bne.n	8002c68 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	691a      	ldr	r2, [r3, #16]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d105      	bne.n	8002c86 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	f023 0201 	bic.w	r2, r3, #1
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	611a      	str	r2, [r3, #16]
  }
}
 8002c86:	bf00      	nop
 8002c88:	3714      	adds	r7, #20
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	40012c00 	.word	0x40012c00
 8002c98:	40000400 	.word	0x40000400
 8002c9c:	40000800 	.word	0x40000800
 8002ca0:	40013400 	.word	0x40013400
 8002ca4:	40015000 	.word	0x40015000
 8002ca8:	40014000 	.word	0x40014000
 8002cac:	40014400 	.word	0x40014400
 8002cb0:	40014800 	.word	0x40014800

08002cb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d101      	bne.n	8002ccc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cc8:	2302      	movs	r3, #2
 8002cca:	e06f      	b.n	8002dac <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a31      	ldr	r2, [pc, #196]	; (8002db8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d009      	beq.n	8002d0a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a30      	ldr	r2, [pc, #192]	; (8002dbc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d004      	beq.n	8002d0a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a2e      	ldr	r2, [pc, #184]	; (8002dc0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d108      	bne.n	8002d1c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002d10:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a1e      	ldr	r2, [pc, #120]	; (8002db8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d01d      	beq.n	8002d80 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d4c:	d018      	beq.n	8002d80 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a1c      	ldr	r2, [pc, #112]	; (8002dc4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d013      	beq.n	8002d80 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a1a      	ldr	r2, [pc, #104]	; (8002dc8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d00e      	beq.n	8002d80 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a15      	ldr	r2, [pc, #84]	; (8002dbc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d009      	beq.n	8002d80 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a16      	ldr	r2, [pc, #88]	; (8002dcc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d004      	beq.n	8002d80 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a11      	ldr	r2, [pc, #68]	; (8002dc0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d10c      	bne.n	8002d9a <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d86:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	68ba      	ldr	r2, [r7, #8]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	40012c00 	.word	0x40012c00
 8002dbc:	40013400 	.word	0x40013400
 8002dc0:	40015000 	.word	0x40015000
 8002dc4:	40000400 	.word	0x40000400
 8002dc8:	40000800 	.word	0x40000800
 8002dcc:	40014000 	.word	0x40014000

08002dd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <cosf>:
 8002e5c:	ee10 3a10 	vmov	r3, s0
 8002e60:	b507      	push	{r0, r1, r2, lr}
 8002e62:	4a1e      	ldr	r2, [pc, #120]	; (8002edc <cosf+0x80>)
 8002e64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	dc06      	bgt.n	8002e7a <cosf+0x1e>
 8002e6c:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8002ee0 <cosf+0x84>
 8002e70:	b003      	add	sp, #12
 8002e72:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e76:	f000 b9b7 	b.w	80031e8 <__kernel_cosf>
 8002e7a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8002e7e:	db04      	blt.n	8002e8a <cosf+0x2e>
 8002e80:	ee30 0a40 	vsub.f32	s0, s0, s0
 8002e84:	b003      	add	sp, #12
 8002e86:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e8a:	4668      	mov	r0, sp
 8002e8c:	f000 f870 	bl	8002f70 <__ieee754_rem_pio2f>
 8002e90:	f000 0003 	and.w	r0, r0, #3
 8002e94:	2801      	cmp	r0, #1
 8002e96:	d009      	beq.n	8002eac <cosf+0x50>
 8002e98:	2802      	cmp	r0, #2
 8002e9a:	d010      	beq.n	8002ebe <cosf+0x62>
 8002e9c:	b9b0      	cbnz	r0, 8002ecc <cosf+0x70>
 8002e9e:	eddd 0a01 	vldr	s1, [sp, #4]
 8002ea2:	ed9d 0a00 	vldr	s0, [sp]
 8002ea6:	f000 f99f 	bl	80031e8 <__kernel_cosf>
 8002eaa:	e7eb      	b.n	8002e84 <cosf+0x28>
 8002eac:	eddd 0a01 	vldr	s1, [sp, #4]
 8002eb0:	ed9d 0a00 	vldr	s0, [sp]
 8002eb4:	f000 fc6e 	bl	8003794 <__kernel_sinf>
 8002eb8:	eeb1 0a40 	vneg.f32	s0, s0
 8002ebc:	e7e2      	b.n	8002e84 <cosf+0x28>
 8002ebe:	eddd 0a01 	vldr	s1, [sp, #4]
 8002ec2:	ed9d 0a00 	vldr	s0, [sp]
 8002ec6:	f000 f98f 	bl	80031e8 <__kernel_cosf>
 8002eca:	e7f5      	b.n	8002eb8 <cosf+0x5c>
 8002ecc:	eddd 0a01 	vldr	s1, [sp, #4]
 8002ed0:	ed9d 0a00 	vldr	s0, [sp]
 8002ed4:	2001      	movs	r0, #1
 8002ed6:	f000 fc5d 	bl	8003794 <__kernel_sinf>
 8002eda:	e7d3      	b.n	8002e84 <cosf+0x28>
 8002edc:	3f490fd8 	.word	0x3f490fd8
 8002ee0:	00000000 	.word	0x00000000

08002ee4 <sinf>:
 8002ee4:	ee10 3a10 	vmov	r3, s0
 8002ee8:	b507      	push	{r0, r1, r2, lr}
 8002eea:	4a1f      	ldr	r2, [pc, #124]	; (8002f68 <sinf+0x84>)
 8002eec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	dc07      	bgt.n	8002f04 <sinf+0x20>
 8002ef4:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8002f6c <sinf+0x88>
 8002ef8:	2000      	movs	r0, #0
 8002efa:	b003      	add	sp, #12
 8002efc:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f00:	f000 bc48 	b.w	8003794 <__kernel_sinf>
 8002f04:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8002f08:	db04      	blt.n	8002f14 <sinf+0x30>
 8002f0a:	ee30 0a40 	vsub.f32	s0, s0, s0
 8002f0e:	b003      	add	sp, #12
 8002f10:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f14:	4668      	mov	r0, sp
 8002f16:	f000 f82b 	bl	8002f70 <__ieee754_rem_pio2f>
 8002f1a:	f000 0003 	and.w	r0, r0, #3
 8002f1e:	2801      	cmp	r0, #1
 8002f20:	d00a      	beq.n	8002f38 <sinf+0x54>
 8002f22:	2802      	cmp	r0, #2
 8002f24:	d00f      	beq.n	8002f46 <sinf+0x62>
 8002f26:	b9c0      	cbnz	r0, 8002f5a <sinf+0x76>
 8002f28:	eddd 0a01 	vldr	s1, [sp, #4]
 8002f2c:	ed9d 0a00 	vldr	s0, [sp]
 8002f30:	2001      	movs	r0, #1
 8002f32:	f000 fc2f 	bl	8003794 <__kernel_sinf>
 8002f36:	e7ea      	b.n	8002f0e <sinf+0x2a>
 8002f38:	eddd 0a01 	vldr	s1, [sp, #4]
 8002f3c:	ed9d 0a00 	vldr	s0, [sp]
 8002f40:	f000 f952 	bl	80031e8 <__kernel_cosf>
 8002f44:	e7e3      	b.n	8002f0e <sinf+0x2a>
 8002f46:	eddd 0a01 	vldr	s1, [sp, #4]
 8002f4a:	ed9d 0a00 	vldr	s0, [sp]
 8002f4e:	2001      	movs	r0, #1
 8002f50:	f000 fc20 	bl	8003794 <__kernel_sinf>
 8002f54:	eeb1 0a40 	vneg.f32	s0, s0
 8002f58:	e7d9      	b.n	8002f0e <sinf+0x2a>
 8002f5a:	eddd 0a01 	vldr	s1, [sp, #4]
 8002f5e:	ed9d 0a00 	vldr	s0, [sp]
 8002f62:	f000 f941 	bl	80031e8 <__kernel_cosf>
 8002f66:	e7f5      	b.n	8002f54 <sinf+0x70>
 8002f68:	3f490fd8 	.word	0x3f490fd8
 8002f6c:	00000000 	.word	0x00000000

08002f70 <__ieee754_rem_pio2f>:
 8002f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f72:	ee10 6a10 	vmov	r6, s0
 8002f76:	4b8e      	ldr	r3, [pc, #568]	; (80031b0 <__ieee754_rem_pio2f+0x240>)
 8002f78:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8002f7c:	429d      	cmp	r5, r3
 8002f7e:	b087      	sub	sp, #28
 8002f80:	eef0 7a40 	vmov.f32	s15, s0
 8002f84:	4604      	mov	r4, r0
 8002f86:	dc05      	bgt.n	8002f94 <__ieee754_rem_pio2f+0x24>
 8002f88:	2300      	movs	r3, #0
 8002f8a:	ed80 0a00 	vstr	s0, [r0]
 8002f8e:	6043      	str	r3, [r0, #4]
 8002f90:	2000      	movs	r0, #0
 8002f92:	e01a      	b.n	8002fca <__ieee754_rem_pio2f+0x5a>
 8002f94:	4b87      	ldr	r3, [pc, #540]	; (80031b4 <__ieee754_rem_pio2f+0x244>)
 8002f96:	429d      	cmp	r5, r3
 8002f98:	dc46      	bgt.n	8003028 <__ieee754_rem_pio2f+0xb8>
 8002f9a:	2e00      	cmp	r6, #0
 8002f9c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80031b8 <__ieee754_rem_pio2f+0x248>
 8002fa0:	4b86      	ldr	r3, [pc, #536]	; (80031bc <__ieee754_rem_pio2f+0x24c>)
 8002fa2:	f025 050f 	bic.w	r5, r5, #15
 8002fa6:	dd1f      	ble.n	8002fe8 <__ieee754_rem_pio2f+0x78>
 8002fa8:	429d      	cmp	r5, r3
 8002faa:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8002fae:	d00e      	beq.n	8002fce <__ieee754_rem_pio2f+0x5e>
 8002fb0:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80031c0 <__ieee754_rem_pio2f+0x250>
 8002fb4:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8002fb8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8002fbc:	ed80 0a00 	vstr	s0, [r0]
 8002fc0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002fc4:	2001      	movs	r0, #1
 8002fc6:	edc4 7a01 	vstr	s15, [r4, #4]
 8002fca:	b007      	add	sp, #28
 8002fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fce:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80031c4 <__ieee754_rem_pio2f+0x254>
 8002fd2:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80031c8 <__ieee754_rem_pio2f+0x258>
 8002fd6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8002fda:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8002fde:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002fe2:	edc0 6a00 	vstr	s13, [r0]
 8002fe6:	e7eb      	b.n	8002fc0 <__ieee754_rem_pio2f+0x50>
 8002fe8:	429d      	cmp	r5, r3
 8002fea:	ee77 7a80 	vadd.f32	s15, s15, s0
 8002fee:	d00e      	beq.n	800300e <__ieee754_rem_pio2f+0x9e>
 8002ff0:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80031c0 <__ieee754_rem_pio2f+0x250>
 8002ff4:	ee37 0a87 	vadd.f32	s0, s15, s14
 8002ff8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8002ffc:	ed80 0a00 	vstr	s0, [r0]
 8003000:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003004:	f04f 30ff 	mov.w	r0, #4294967295
 8003008:	edc4 7a01 	vstr	s15, [r4, #4]
 800300c:	e7dd      	b.n	8002fca <__ieee754_rem_pio2f+0x5a>
 800300e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80031c4 <__ieee754_rem_pio2f+0x254>
 8003012:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80031c8 <__ieee754_rem_pio2f+0x258>
 8003016:	ee77 7a80 	vadd.f32	s15, s15, s0
 800301a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800301e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003022:	edc0 6a00 	vstr	s13, [r0]
 8003026:	e7eb      	b.n	8003000 <__ieee754_rem_pio2f+0x90>
 8003028:	4b68      	ldr	r3, [pc, #416]	; (80031cc <__ieee754_rem_pio2f+0x25c>)
 800302a:	429d      	cmp	r5, r3
 800302c:	dc72      	bgt.n	8003114 <__ieee754_rem_pio2f+0x1a4>
 800302e:	f000 fbf9 	bl	8003824 <fabsf>
 8003032:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80031d0 <__ieee754_rem_pio2f+0x260>
 8003036:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800303a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800303e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003042:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003046:	ee17 0a90 	vmov	r0, s15
 800304a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80031b8 <__ieee754_rem_pio2f+0x248>
 800304e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8003052:	281f      	cmp	r0, #31
 8003054:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80031c0 <__ieee754_rem_pio2f+0x250>
 8003058:	ee67 7a27 	vmul.f32	s15, s14, s15
 800305c:	eeb1 6a47 	vneg.f32	s12, s14
 8003060:	ee70 6a67 	vsub.f32	s13, s0, s15
 8003064:	ee16 2a90 	vmov	r2, s13
 8003068:	dc1c      	bgt.n	80030a4 <__ieee754_rem_pio2f+0x134>
 800306a:	495a      	ldr	r1, [pc, #360]	; (80031d4 <__ieee754_rem_pio2f+0x264>)
 800306c:	1e47      	subs	r7, r0, #1
 800306e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8003072:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8003076:	428b      	cmp	r3, r1
 8003078:	d014      	beq.n	80030a4 <__ieee754_rem_pio2f+0x134>
 800307a:	6022      	str	r2, [r4, #0]
 800307c:	ed94 7a00 	vldr	s14, [r4]
 8003080:	ee30 0a47 	vsub.f32	s0, s0, s14
 8003084:	2e00      	cmp	r6, #0
 8003086:	ee30 0a67 	vsub.f32	s0, s0, s15
 800308a:	ed84 0a01 	vstr	s0, [r4, #4]
 800308e:	da9c      	bge.n	8002fca <__ieee754_rem_pio2f+0x5a>
 8003090:	eeb1 7a47 	vneg.f32	s14, s14
 8003094:	eeb1 0a40 	vneg.f32	s0, s0
 8003098:	ed84 7a00 	vstr	s14, [r4]
 800309c:	ed84 0a01 	vstr	s0, [r4, #4]
 80030a0:	4240      	negs	r0, r0
 80030a2:	e792      	b.n	8002fca <__ieee754_rem_pio2f+0x5a>
 80030a4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80030a8:	15eb      	asrs	r3, r5, #23
 80030aa:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 80030ae:	2d08      	cmp	r5, #8
 80030b0:	dde3      	ble.n	800307a <__ieee754_rem_pio2f+0x10a>
 80030b2:	eddf 7a44 	vldr	s15, [pc, #272]	; 80031c4 <__ieee754_rem_pio2f+0x254>
 80030b6:	eddf 5a44 	vldr	s11, [pc, #272]	; 80031c8 <__ieee754_rem_pio2f+0x258>
 80030ba:	eef0 6a40 	vmov.f32	s13, s0
 80030be:	eee6 6a27 	vfma.f32	s13, s12, s15
 80030c2:	ee30 0a66 	vsub.f32	s0, s0, s13
 80030c6:	eea6 0a27 	vfma.f32	s0, s12, s15
 80030ca:	eef0 7a40 	vmov.f32	s15, s0
 80030ce:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80030d2:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80030d6:	ee15 2a90 	vmov	r2, s11
 80030da:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80030de:	1a5b      	subs	r3, r3, r1
 80030e0:	2b19      	cmp	r3, #25
 80030e2:	dc04      	bgt.n	80030ee <__ieee754_rem_pio2f+0x17e>
 80030e4:	edc4 5a00 	vstr	s11, [r4]
 80030e8:	eeb0 0a66 	vmov.f32	s0, s13
 80030ec:	e7c6      	b.n	800307c <__ieee754_rem_pio2f+0x10c>
 80030ee:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80031d8 <__ieee754_rem_pio2f+0x268>
 80030f2:	eeb0 0a66 	vmov.f32	s0, s13
 80030f6:	eea6 0a25 	vfma.f32	s0, s12, s11
 80030fa:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80030fe:	eddf 6a37 	vldr	s13, [pc, #220]	; 80031dc <__ieee754_rem_pio2f+0x26c>
 8003102:	eee6 7a25 	vfma.f32	s15, s12, s11
 8003106:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800310a:	ee30 7a67 	vsub.f32	s14, s0, s15
 800310e:	ed84 7a00 	vstr	s14, [r4]
 8003112:	e7b3      	b.n	800307c <__ieee754_rem_pio2f+0x10c>
 8003114:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8003118:	db06      	blt.n	8003128 <__ieee754_rem_pio2f+0x1b8>
 800311a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800311e:	edc0 7a01 	vstr	s15, [r0, #4]
 8003122:	edc0 7a00 	vstr	s15, [r0]
 8003126:	e733      	b.n	8002f90 <__ieee754_rem_pio2f+0x20>
 8003128:	15ea      	asrs	r2, r5, #23
 800312a:	3a86      	subs	r2, #134	; 0x86
 800312c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8003130:	ee07 3a90 	vmov	s15, r3
 8003134:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8003138:	eddf 6a29 	vldr	s13, [pc, #164]	; 80031e0 <__ieee754_rem_pio2f+0x270>
 800313c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003140:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003144:	ed8d 7a03 	vstr	s14, [sp, #12]
 8003148:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800314c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8003150:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003154:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003158:	ed8d 7a04 	vstr	s14, [sp, #16]
 800315c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003160:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003168:	edcd 7a05 	vstr	s15, [sp, #20]
 800316c:	d11e      	bne.n	80031ac <__ieee754_rem_pio2f+0x23c>
 800316e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8003172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003176:	bf14      	ite	ne
 8003178:	2302      	movne	r3, #2
 800317a:	2301      	moveq	r3, #1
 800317c:	4919      	ldr	r1, [pc, #100]	; (80031e4 <__ieee754_rem_pio2f+0x274>)
 800317e:	9101      	str	r1, [sp, #4]
 8003180:	2102      	movs	r1, #2
 8003182:	9100      	str	r1, [sp, #0]
 8003184:	a803      	add	r0, sp, #12
 8003186:	4621      	mov	r1, r4
 8003188:	f000 f88e 	bl	80032a8 <__kernel_rem_pio2f>
 800318c:	2e00      	cmp	r6, #0
 800318e:	f6bf af1c 	bge.w	8002fca <__ieee754_rem_pio2f+0x5a>
 8003192:	edd4 7a00 	vldr	s15, [r4]
 8003196:	eef1 7a67 	vneg.f32	s15, s15
 800319a:	edc4 7a00 	vstr	s15, [r4]
 800319e:	edd4 7a01 	vldr	s15, [r4, #4]
 80031a2:	eef1 7a67 	vneg.f32	s15, s15
 80031a6:	edc4 7a01 	vstr	s15, [r4, #4]
 80031aa:	e779      	b.n	80030a0 <__ieee754_rem_pio2f+0x130>
 80031ac:	2303      	movs	r3, #3
 80031ae:	e7e5      	b.n	800317c <__ieee754_rem_pio2f+0x20c>
 80031b0:	3f490fd8 	.word	0x3f490fd8
 80031b4:	4016cbe3 	.word	0x4016cbe3
 80031b8:	3fc90f80 	.word	0x3fc90f80
 80031bc:	3fc90fd0 	.word	0x3fc90fd0
 80031c0:	37354443 	.word	0x37354443
 80031c4:	37354400 	.word	0x37354400
 80031c8:	2e85a308 	.word	0x2e85a308
 80031cc:	43490f80 	.word	0x43490f80
 80031d0:	3f22f984 	.word	0x3f22f984
 80031d4:	08003a1c 	.word	0x08003a1c
 80031d8:	2e85a300 	.word	0x2e85a300
 80031dc:	248d3132 	.word	0x248d3132
 80031e0:	43800000 	.word	0x43800000
 80031e4:	08003a9c 	.word	0x08003a9c

080031e8 <__kernel_cosf>:
 80031e8:	ee10 3a10 	vmov	r3, s0
 80031ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80031f0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80031f4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80031f8:	da05      	bge.n	8003206 <__kernel_cosf+0x1e>
 80031fa:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80031fe:	ee17 2a90 	vmov	r2, s15
 8003202:	2a00      	cmp	r2, #0
 8003204:	d03d      	beq.n	8003282 <__kernel_cosf+0x9a>
 8003206:	ee60 5a00 	vmul.f32	s11, s0, s0
 800320a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8003288 <__kernel_cosf+0xa0>
 800320e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800328c <__kernel_cosf+0xa4>
 8003212:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8003290 <__kernel_cosf+0xa8>
 8003216:	4a1f      	ldr	r2, [pc, #124]	; (8003294 <__kernel_cosf+0xac>)
 8003218:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800321c:	4293      	cmp	r3, r2
 800321e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8003298 <__kernel_cosf+0xb0>
 8003222:	eee7 7a25 	vfma.f32	s15, s14, s11
 8003226:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800329c <__kernel_cosf+0xb4>
 800322a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800322e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80032a0 <__kernel_cosf+0xb8>
 8003232:	eee7 7a25 	vfma.f32	s15, s14, s11
 8003236:	eeb0 7a66 	vmov.f32	s14, s13
 800323a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800323e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8003242:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8003246:	ee67 6a25 	vmul.f32	s13, s14, s11
 800324a:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800324e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8003252:	dc04      	bgt.n	800325e <__kernel_cosf+0x76>
 8003254:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003258:	ee36 0a47 	vsub.f32	s0, s12, s14
 800325c:	4770      	bx	lr
 800325e:	4a11      	ldr	r2, [pc, #68]	; (80032a4 <__kernel_cosf+0xbc>)
 8003260:	4293      	cmp	r3, r2
 8003262:	bfda      	itte	le
 8003264:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8003268:	ee06 3a90 	vmovle	s13, r3
 800326c:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8003270:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003274:	ee36 0a66 	vsub.f32	s0, s12, s13
 8003278:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800327c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003280:	4770      	bx	lr
 8003282:	eeb0 0a46 	vmov.f32	s0, s12
 8003286:	4770      	bx	lr
 8003288:	ad47d74e 	.word	0xad47d74e
 800328c:	310f74f6 	.word	0x310f74f6
 8003290:	3d2aaaab 	.word	0x3d2aaaab
 8003294:	3e999999 	.word	0x3e999999
 8003298:	b493f27c 	.word	0xb493f27c
 800329c:	37d00d01 	.word	0x37d00d01
 80032a0:	bab60b61 	.word	0xbab60b61
 80032a4:	3f480000 	.word	0x3f480000

080032a8 <__kernel_rem_pio2f>:
 80032a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032ac:	ed2d 8b04 	vpush	{d8-d9}
 80032b0:	b0d9      	sub	sp, #356	; 0x164
 80032b2:	4688      	mov	r8, r1
 80032b4:	9002      	str	r0, [sp, #8]
 80032b6:	49bb      	ldr	r1, [pc, #748]	; (80035a4 <__kernel_rem_pio2f+0x2fc>)
 80032b8:	9866      	ldr	r0, [sp, #408]	; 0x198
 80032ba:	9301      	str	r3, [sp, #4]
 80032bc:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 80032c0:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 80032c4:	1e59      	subs	r1, r3, #1
 80032c6:	1d13      	adds	r3, r2, #4
 80032c8:	db27      	blt.n	800331a <__kernel_rem_pio2f+0x72>
 80032ca:	f1b2 0b03 	subs.w	fp, r2, #3
 80032ce:	bf48      	it	mi
 80032d0:	f102 0b04 	addmi.w	fp, r2, #4
 80032d4:	ea4f 00eb 	mov.w	r0, fp, asr #3
 80032d8:	1c45      	adds	r5, r0, #1
 80032da:	00ec      	lsls	r4, r5, #3
 80032dc:	1a47      	subs	r7, r0, r1
 80032de:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 80035b4 <__kernel_rem_pio2f+0x30c>
 80032e2:	9403      	str	r4, [sp, #12]
 80032e4:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 80032e8:	eb0a 0c01 	add.w	ip, sl, r1
 80032ec:	ae1c      	add	r6, sp, #112	; 0x70
 80032ee:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 80032f2:	2400      	movs	r4, #0
 80032f4:	4564      	cmp	r4, ip
 80032f6:	dd12      	ble.n	800331e <__kernel_rem_pio2f+0x76>
 80032f8:	9b01      	ldr	r3, [sp, #4]
 80032fa:	ac1c      	add	r4, sp, #112	; 0x70
 80032fc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8003300:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8003304:	f04f 0c00 	mov.w	ip, #0
 8003308:	45d4      	cmp	ip, sl
 800330a:	dc27      	bgt.n	800335c <__kernel_rem_pio2f+0xb4>
 800330c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8003310:	eddf 7aa8 	vldr	s15, [pc, #672]	; 80035b4 <__kernel_rem_pio2f+0x30c>
 8003314:	4627      	mov	r7, r4
 8003316:	2600      	movs	r6, #0
 8003318:	e016      	b.n	8003348 <__kernel_rem_pio2f+0xa0>
 800331a:	2000      	movs	r0, #0
 800331c:	e7dc      	b.n	80032d8 <__kernel_rem_pio2f+0x30>
 800331e:	42e7      	cmn	r7, r4
 8003320:	bf5d      	ittte	pl
 8003322:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8003326:	ee07 3a90 	vmovpl	s15, r3
 800332a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800332e:	eef0 7a47 	vmovmi.f32	s15, s14
 8003332:	ece6 7a01 	vstmia	r6!, {s15}
 8003336:	3401      	adds	r4, #1
 8003338:	e7dc      	b.n	80032f4 <__kernel_rem_pio2f+0x4c>
 800333a:	ecf9 6a01 	vldmia	r9!, {s13}
 800333e:	ed97 7a00 	vldr	s14, [r7]
 8003342:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003346:	3601      	adds	r6, #1
 8003348:	428e      	cmp	r6, r1
 800334a:	f1a7 0704 	sub.w	r7, r7, #4
 800334e:	ddf4      	ble.n	800333a <__kernel_rem_pio2f+0x92>
 8003350:	eceb 7a01 	vstmia	fp!, {s15}
 8003354:	f10c 0c01 	add.w	ip, ip, #1
 8003358:	3404      	adds	r4, #4
 800335a:	e7d5      	b.n	8003308 <__kernel_rem_pio2f+0x60>
 800335c:	ab08      	add	r3, sp, #32
 800335e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8003362:	eddf 8a93 	vldr	s17, [pc, #588]	; 80035b0 <__kernel_rem_pio2f+0x308>
 8003366:	ed9f 9a91 	vldr	s18, [pc, #580]	; 80035ac <__kernel_rem_pio2f+0x304>
 800336a:	9304      	str	r3, [sp, #16]
 800336c:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8003370:	4656      	mov	r6, sl
 8003372:	00b3      	lsls	r3, r6, #2
 8003374:	9305      	str	r3, [sp, #20]
 8003376:	ab58      	add	r3, sp, #352	; 0x160
 8003378:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800337c:	ac08      	add	r4, sp, #32
 800337e:	ab44      	add	r3, sp, #272	; 0x110
 8003380:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8003384:	46a4      	mov	ip, r4
 8003386:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800338a:	4637      	mov	r7, r6
 800338c:	2f00      	cmp	r7, #0
 800338e:	f1a0 0004 	sub.w	r0, r0, #4
 8003392:	dc4f      	bgt.n	8003434 <__kernel_rem_pio2f+0x18c>
 8003394:	4628      	mov	r0, r5
 8003396:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800339a:	f000 fa8d 	bl	80038b8 <scalbnf>
 800339e:	eeb0 8a40 	vmov.f32	s16, s0
 80033a2:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80033a6:	ee28 0a00 	vmul.f32	s0, s16, s0
 80033aa:	f000 fa43 	bl	8003834 <floorf>
 80033ae:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80033b2:	eea0 8a67 	vfms.f32	s16, s0, s15
 80033b6:	2d00      	cmp	r5, #0
 80033b8:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80033bc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80033c0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80033c4:	ee17 9a90 	vmov	r9, s15
 80033c8:	ee38 8a40 	vsub.f32	s16, s16, s0
 80033cc:	dd44      	ble.n	8003458 <__kernel_rem_pio2f+0x1b0>
 80033ce:	f106 3cff 	add.w	ip, r6, #4294967295
 80033d2:	ab08      	add	r3, sp, #32
 80033d4:	f1c5 0e08 	rsb	lr, r5, #8
 80033d8:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 80033dc:	fa47 f00e 	asr.w	r0, r7, lr
 80033e0:	4481      	add	r9, r0
 80033e2:	fa00 f00e 	lsl.w	r0, r0, lr
 80033e6:	1a3f      	subs	r7, r7, r0
 80033e8:	f1c5 0007 	rsb	r0, r5, #7
 80033ec:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 80033f0:	4107      	asrs	r7, r0
 80033f2:	2f00      	cmp	r7, #0
 80033f4:	dd3f      	ble.n	8003476 <__kernel_rem_pio2f+0x1ce>
 80033f6:	f04f 0e00 	mov.w	lr, #0
 80033fa:	f109 0901 	add.w	r9, r9, #1
 80033fe:	4673      	mov	r3, lr
 8003400:	4576      	cmp	r6, lr
 8003402:	dc6b      	bgt.n	80034dc <__kernel_rem_pio2f+0x234>
 8003404:	2d00      	cmp	r5, #0
 8003406:	dd04      	ble.n	8003412 <__kernel_rem_pio2f+0x16a>
 8003408:	2d01      	cmp	r5, #1
 800340a:	d078      	beq.n	80034fe <__kernel_rem_pio2f+0x256>
 800340c:	2d02      	cmp	r5, #2
 800340e:	f000 8081 	beq.w	8003514 <__kernel_rem_pio2f+0x26c>
 8003412:	2f02      	cmp	r7, #2
 8003414:	d12f      	bne.n	8003476 <__kernel_rem_pio2f+0x1ce>
 8003416:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800341a:	ee30 8a48 	vsub.f32	s16, s0, s16
 800341e:	b353      	cbz	r3, 8003476 <__kernel_rem_pio2f+0x1ce>
 8003420:	4628      	mov	r0, r5
 8003422:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8003426:	f000 fa47 	bl	80038b8 <scalbnf>
 800342a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800342e:	ee38 8a40 	vsub.f32	s16, s16, s0
 8003432:	e020      	b.n	8003476 <__kernel_rem_pio2f+0x1ce>
 8003434:	ee60 7a28 	vmul.f32	s15, s0, s17
 8003438:	3f01      	subs	r7, #1
 800343a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800343e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003442:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8003446:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800344a:	ecac 0a01 	vstmia	ip!, {s0}
 800344e:	ed90 0a00 	vldr	s0, [r0]
 8003452:	ee37 0a80 	vadd.f32	s0, s15, s0
 8003456:	e799      	b.n	800338c <__kernel_rem_pio2f+0xe4>
 8003458:	d105      	bne.n	8003466 <__kernel_rem_pio2f+0x1be>
 800345a:	1e70      	subs	r0, r6, #1
 800345c:	ab08      	add	r3, sp, #32
 800345e:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8003462:	11ff      	asrs	r7, r7, #7
 8003464:	e7c5      	b.n	80033f2 <__kernel_rem_pio2f+0x14a>
 8003466:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800346a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800346e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003472:	da31      	bge.n	80034d8 <__kernel_rem_pio2f+0x230>
 8003474:	2700      	movs	r7, #0
 8003476:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800347a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800347e:	f040 809b 	bne.w	80035b8 <__kernel_rem_pio2f+0x310>
 8003482:	1e74      	subs	r4, r6, #1
 8003484:	46a4      	mov	ip, r4
 8003486:	2000      	movs	r0, #0
 8003488:	45d4      	cmp	ip, sl
 800348a:	da4a      	bge.n	8003522 <__kernel_rem_pio2f+0x27a>
 800348c:	2800      	cmp	r0, #0
 800348e:	d07a      	beq.n	8003586 <__kernel_rem_pio2f+0x2de>
 8003490:	ab08      	add	r3, sp, #32
 8003492:	3d08      	subs	r5, #8
 8003494:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8003498:	2b00      	cmp	r3, #0
 800349a:	f000 8081 	beq.w	80035a0 <__kernel_rem_pio2f+0x2f8>
 800349e:	4628      	mov	r0, r5
 80034a0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80034a4:	00a5      	lsls	r5, r4, #2
 80034a6:	f000 fa07 	bl	80038b8 <scalbnf>
 80034aa:	aa44      	add	r2, sp, #272	; 0x110
 80034ac:	1d2b      	adds	r3, r5, #4
 80034ae:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80035b0 <__kernel_rem_pio2f+0x308>
 80034b2:	18d1      	adds	r1, r2, r3
 80034b4:	4622      	mov	r2, r4
 80034b6:	2a00      	cmp	r2, #0
 80034b8:	f280 80ae 	bge.w	8003618 <__kernel_rem_pio2f+0x370>
 80034bc:	4622      	mov	r2, r4
 80034be:	2a00      	cmp	r2, #0
 80034c0:	f2c0 80cc 	blt.w	800365c <__kernel_rem_pio2f+0x3b4>
 80034c4:	a944      	add	r1, sp, #272	; 0x110
 80034c6:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 80034ca:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 80035a8 <__kernel_rem_pio2f+0x300>
 80034ce:	eddf 7a39 	vldr	s15, [pc, #228]	; 80035b4 <__kernel_rem_pio2f+0x30c>
 80034d2:	2000      	movs	r0, #0
 80034d4:	1aa1      	subs	r1, r4, r2
 80034d6:	e0b6      	b.n	8003646 <__kernel_rem_pio2f+0x39e>
 80034d8:	2702      	movs	r7, #2
 80034da:	e78c      	b.n	80033f6 <__kernel_rem_pio2f+0x14e>
 80034dc:	6820      	ldr	r0, [r4, #0]
 80034de:	b94b      	cbnz	r3, 80034f4 <__kernel_rem_pio2f+0x24c>
 80034e0:	b118      	cbz	r0, 80034ea <__kernel_rem_pio2f+0x242>
 80034e2:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80034e6:	6020      	str	r0, [r4, #0]
 80034e8:	2001      	movs	r0, #1
 80034ea:	f10e 0e01 	add.w	lr, lr, #1
 80034ee:	3404      	adds	r4, #4
 80034f0:	4603      	mov	r3, r0
 80034f2:	e785      	b.n	8003400 <__kernel_rem_pio2f+0x158>
 80034f4:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 80034f8:	6020      	str	r0, [r4, #0]
 80034fa:	4618      	mov	r0, r3
 80034fc:	e7f5      	b.n	80034ea <__kernel_rem_pio2f+0x242>
 80034fe:	1e74      	subs	r4, r6, #1
 8003500:	a808      	add	r0, sp, #32
 8003502:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8003506:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800350a:	f10d 0c20 	add.w	ip, sp, #32
 800350e:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8003512:	e77e      	b.n	8003412 <__kernel_rem_pio2f+0x16a>
 8003514:	1e74      	subs	r4, r6, #1
 8003516:	a808      	add	r0, sp, #32
 8003518:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800351c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8003520:	e7f3      	b.n	800350a <__kernel_rem_pio2f+0x262>
 8003522:	ab08      	add	r3, sp, #32
 8003524:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8003528:	f10c 3cff 	add.w	ip, ip, #4294967295
 800352c:	4318      	orrs	r0, r3
 800352e:	e7ab      	b.n	8003488 <__kernel_rem_pio2f+0x1e0>
 8003530:	f10c 0c01 	add.w	ip, ip, #1
 8003534:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8003538:	2c00      	cmp	r4, #0
 800353a:	d0f9      	beq.n	8003530 <__kernel_rem_pio2f+0x288>
 800353c:	9b05      	ldr	r3, [sp, #20]
 800353e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8003542:	eb0d 0003 	add.w	r0, sp, r3
 8003546:	9b01      	ldr	r3, [sp, #4]
 8003548:	18f4      	adds	r4, r6, r3
 800354a:	ab1c      	add	r3, sp, #112	; 0x70
 800354c:	1c77      	adds	r7, r6, #1
 800354e:	384c      	subs	r0, #76	; 0x4c
 8003550:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8003554:	4466      	add	r6, ip
 8003556:	42be      	cmp	r6, r7
 8003558:	f6ff af0b 	blt.w	8003372 <__kernel_rem_pio2f+0xca>
 800355c:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8003560:	f8dd e008 	ldr.w	lr, [sp, #8]
 8003564:	ee07 3a90 	vmov	s15, r3
 8003568:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800356c:	f04f 0c00 	mov.w	ip, #0
 8003570:	ece4 7a01 	vstmia	r4!, {s15}
 8003574:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80035b4 <__kernel_rem_pio2f+0x30c>
 8003578:	46a1      	mov	r9, r4
 800357a:	458c      	cmp	ip, r1
 800357c:	dd07      	ble.n	800358e <__kernel_rem_pio2f+0x2e6>
 800357e:	ece0 7a01 	vstmia	r0!, {s15}
 8003582:	3701      	adds	r7, #1
 8003584:	e7e7      	b.n	8003556 <__kernel_rem_pio2f+0x2ae>
 8003586:	9804      	ldr	r0, [sp, #16]
 8003588:	f04f 0c01 	mov.w	ip, #1
 800358c:	e7d2      	b.n	8003534 <__kernel_rem_pio2f+0x28c>
 800358e:	ecfe 6a01 	vldmia	lr!, {s13}
 8003592:	ed39 7a01 	vldmdb	r9!, {s14}
 8003596:	f10c 0c01 	add.w	ip, ip, #1
 800359a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800359e:	e7ec      	b.n	800357a <__kernel_rem_pio2f+0x2d2>
 80035a0:	3c01      	subs	r4, #1
 80035a2:	e775      	b.n	8003490 <__kernel_rem_pio2f+0x1e8>
 80035a4:	08003de0 	.word	0x08003de0
 80035a8:	08003db4 	.word	0x08003db4
 80035ac:	43800000 	.word	0x43800000
 80035b0:	3b800000 	.word	0x3b800000
 80035b4:	00000000 	.word	0x00000000
 80035b8:	9b03      	ldr	r3, [sp, #12]
 80035ba:	eeb0 0a48 	vmov.f32	s0, s16
 80035be:	1a98      	subs	r0, r3, r2
 80035c0:	f000 f97a 	bl	80038b8 <scalbnf>
 80035c4:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80035ac <__kernel_rem_pio2f+0x304>
 80035c8:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80035cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035d0:	db19      	blt.n	8003606 <__kernel_rem_pio2f+0x35e>
 80035d2:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80035b0 <__kernel_rem_pio2f+0x308>
 80035d6:	ee60 7a27 	vmul.f32	s15, s0, s15
 80035da:	aa08      	add	r2, sp, #32
 80035dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035e0:	1c74      	adds	r4, r6, #1
 80035e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035e6:	3508      	adds	r5, #8
 80035e8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80035ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035f0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80035f4:	ee10 3a10 	vmov	r3, s0
 80035f8:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80035fc:	ee17 3a90 	vmov	r3, s15
 8003600:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8003604:	e74b      	b.n	800349e <__kernel_rem_pio2f+0x1f6>
 8003606:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800360a:	aa08      	add	r2, sp, #32
 800360c:	ee10 3a10 	vmov	r3, s0
 8003610:	4634      	mov	r4, r6
 8003612:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8003616:	e742      	b.n	800349e <__kernel_rem_pio2f+0x1f6>
 8003618:	a808      	add	r0, sp, #32
 800361a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800361e:	9001      	str	r0, [sp, #4]
 8003620:	ee07 0a90 	vmov	s15, r0
 8003624:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003628:	3a01      	subs	r2, #1
 800362a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800362e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8003632:	ed61 7a01 	vstmdb	r1!, {s15}
 8003636:	e73e      	b.n	80034b6 <__kernel_rem_pio2f+0x20e>
 8003638:	ecfc 6a01 	vldmia	ip!, {s13}
 800363c:	ecb6 7a01 	vldmia	r6!, {s14}
 8003640:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003644:	3001      	adds	r0, #1
 8003646:	4550      	cmp	r0, sl
 8003648:	dc01      	bgt.n	800364e <__kernel_rem_pio2f+0x3a6>
 800364a:	4288      	cmp	r0, r1
 800364c:	ddf4      	ble.n	8003638 <__kernel_rem_pio2f+0x390>
 800364e:	a858      	add	r0, sp, #352	; 0x160
 8003650:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8003654:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8003658:	3a01      	subs	r2, #1
 800365a:	e730      	b.n	80034be <__kernel_rem_pio2f+0x216>
 800365c:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800365e:	2a02      	cmp	r2, #2
 8003660:	dc09      	bgt.n	8003676 <__kernel_rem_pio2f+0x3ce>
 8003662:	2a00      	cmp	r2, #0
 8003664:	dc2a      	bgt.n	80036bc <__kernel_rem_pio2f+0x414>
 8003666:	d043      	beq.n	80036f0 <__kernel_rem_pio2f+0x448>
 8003668:	f009 0007 	and.w	r0, r9, #7
 800366c:	b059      	add	sp, #356	; 0x164
 800366e:	ecbd 8b04 	vpop	{d8-d9}
 8003672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003676:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8003678:	2b03      	cmp	r3, #3
 800367a:	d1f5      	bne.n	8003668 <__kernel_rem_pio2f+0x3c0>
 800367c:	ab30      	add	r3, sp, #192	; 0xc0
 800367e:	442b      	add	r3, r5
 8003680:	461a      	mov	r2, r3
 8003682:	4619      	mov	r1, r3
 8003684:	4620      	mov	r0, r4
 8003686:	2800      	cmp	r0, #0
 8003688:	f1a1 0104 	sub.w	r1, r1, #4
 800368c:	dc51      	bgt.n	8003732 <__kernel_rem_pio2f+0x48a>
 800368e:	4621      	mov	r1, r4
 8003690:	2901      	cmp	r1, #1
 8003692:	f1a2 0204 	sub.w	r2, r2, #4
 8003696:	dc5c      	bgt.n	8003752 <__kernel_rem_pio2f+0x4aa>
 8003698:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 80035b4 <__kernel_rem_pio2f+0x30c>
 800369c:	3304      	adds	r3, #4
 800369e:	2c01      	cmp	r4, #1
 80036a0:	dc67      	bgt.n	8003772 <__kernel_rem_pio2f+0x4ca>
 80036a2:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80036a6:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 80036aa:	2f00      	cmp	r7, #0
 80036ac:	d167      	bne.n	800377e <__kernel_rem_pio2f+0x4d6>
 80036ae:	edc8 6a00 	vstr	s13, [r8]
 80036b2:	ed88 7a01 	vstr	s14, [r8, #4]
 80036b6:	edc8 7a02 	vstr	s15, [r8, #8]
 80036ba:	e7d5      	b.n	8003668 <__kernel_rem_pio2f+0x3c0>
 80036bc:	aa30      	add	r2, sp, #192	; 0xc0
 80036be:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 80035b4 <__kernel_rem_pio2f+0x30c>
 80036c2:	4413      	add	r3, r2
 80036c4:	4622      	mov	r2, r4
 80036c6:	2a00      	cmp	r2, #0
 80036c8:	da24      	bge.n	8003714 <__kernel_rem_pio2f+0x46c>
 80036ca:	b34f      	cbz	r7, 8003720 <__kernel_rem_pio2f+0x478>
 80036cc:	eef1 7a47 	vneg.f32	s15, s14
 80036d0:	edc8 7a00 	vstr	s15, [r8]
 80036d4:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 80036d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80036dc:	aa31      	add	r2, sp, #196	; 0xc4
 80036de:	2301      	movs	r3, #1
 80036e0:	429c      	cmp	r4, r3
 80036e2:	da20      	bge.n	8003726 <__kernel_rem_pio2f+0x47e>
 80036e4:	b10f      	cbz	r7, 80036ea <__kernel_rem_pio2f+0x442>
 80036e6:	eef1 7a67 	vneg.f32	s15, s15
 80036ea:	edc8 7a01 	vstr	s15, [r8, #4]
 80036ee:	e7bb      	b.n	8003668 <__kernel_rem_pio2f+0x3c0>
 80036f0:	aa30      	add	r2, sp, #192	; 0xc0
 80036f2:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 80035b4 <__kernel_rem_pio2f+0x30c>
 80036f6:	4413      	add	r3, r2
 80036f8:	2c00      	cmp	r4, #0
 80036fa:	da05      	bge.n	8003708 <__kernel_rem_pio2f+0x460>
 80036fc:	b10f      	cbz	r7, 8003702 <__kernel_rem_pio2f+0x45a>
 80036fe:	eef1 7a67 	vneg.f32	s15, s15
 8003702:	edc8 7a00 	vstr	s15, [r8]
 8003706:	e7af      	b.n	8003668 <__kernel_rem_pio2f+0x3c0>
 8003708:	ed33 7a01 	vldmdb	r3!, {s14}
 800370c:	3c01      	subs	r4, #1
 800370e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003712:	e7f1      	b.n	80036f8 <__kernel_rem_pio2f+0x450>
 8003714:	ed73 7a01 	vldmdb	r3!, {s15}
 8003718:	3a01      	subs	r2, #1
 800371a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800371e:	e7d2      	b.n	80036c6 <__kernel_rem_pio2f+0x41e>
 8003720:	eef0 7a47 	vmov.f32	s15, s14
 8003724:	e7d4      	b.n	80036d0 <__kernel_rem_pio2f+0x428>
 8003726:	ecb2 7a01 	vldmia	r2!, {s14}
 800372a:	3301      	adds	r3, #1
 800372c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003730:	e7d6      	b.n	80036e0 <__kernel_rem_pio2f+0x438>
 8003732:	edd1 7a00 	vldr	s15, [r1]
 8003736:	edd1 6a01 	vldr	s13, [r1, #4]
 800373a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800373e:	3801      	subs	r0, #1
 8003740:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003744:	ed81 7a00 	vstr	s14, [r1]
 8003748:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800374c:	edc1 7a01 	vstr	s15, [r1, #4]
 8003750:	e799      	b.n	8003686 <__kernel_rem_pio2f+0x3de>
 8003752:	edd2 7a00 	vldr	s15, [r2]
 8003756:	edd2 6a01 	vldr	s13, [r2, #4]
 800375a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800375e:	3901      	subs	r1, #1
 8003760:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003764:	ed82 7a00 	vstr	s14, [r2]
 8003768:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800376c:	edc2 7a01 	vstr	s15, [r2, #4]
 8003770:	e78e      	b.n	8003690 <__kernel_rem_pio2f+0x3e8>
 8003772:	ed33 7a01 	vldmdb	r3!, {s14}
 8003776:	3c01      	subs	r4, #1
 8003778:	ee77 7a87 	vadd.f32	s15, s15, s14
 800377c:	e78f      	b.n	800369e <__kernel_rem_pio2f+0x3f6>
 800377e:	eef1 6a66 	vneg.f32	s13, s13
 8003782:	eeb1 7a47 	vneg.f32	s14, s14
 8003786:	edc8 6a00 	vstr	s13, [r8]
 800378a:	ed88 7a01 	vstr	s14, [r8, #4]
 800378e:	eef1 7a67 	vneg.f32	s15, s15
 8003792:	e790      	b.n	80036b6 <__kernel_rem_pio2f+0x40e>

08003794 <__kernel_sinf>:
 8003794:	ee10 3a10 	vmov	r3, s0
 8003798:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800379c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80037a0:	da04      	bge.n	80037ac <__kernel_sinf+0x18>
 80037a2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80037a6:	ee17 3a90 	vmov	r3, s15
 80037aa:	b35b      	cbz	r3, 8003804 <__kernel_sinf+0x70>
 80037ac:	ee20 7a00 	vmul.f32	s14, s0, s0
 80037b0:	eddf 7a15 	vldr	s15, [pc, #84]	; 8003808 <__kernel_sinf+0x74>
 80037b4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800380c <__kernel_sinf+0x78>
 80037b8:	eea7 6a27 	vfma.f32	s12, s14, s15
 80037bc:	eddf 7a14 	vldr	s15, [pc, #80]	; 8003810 <__kernel_sinf+0x7c>
 80037c0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80037c4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8003814 <__kernel_sinf+0x80>
 80037c8:	eea7 6a87 	vfma.f32	s12, s15, s14
 80037cc:	eddf 7a12 	vldr	s15, [pc, #72]	; 8003818 <__kernel_sinf+0x84>
 80037d0:	ee60 6a07 	vmul.f32	s13, s0, s14
 80037d4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80037d8:	b930      	cbnz	r0, 80037e8 <__kernel_sinf+0x54>
 80037da:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800381c <__kernel_sinf+0x88>
 80037de:	eea7 6a27 	vfma.f32	s12, s14, s15
 80037e2:	eea6 0a26 	vfma.f32	s0, s12, s13
 80037e6:	4770      	bx	lr
 80037e8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80037ec:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80037f0:	eee0 7a86 	vfma.f32	s15, s1, s12
 80037f4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80037f8:	eddf 7a09 	vldr	s15, [pc, #36]	; 8003820 <__kernel_sinf+0x8c>
 80037fc:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8003800:	ee30 0a60 	vsub.f32	s0, s0, s1
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	2f2ec9d3 	.word	0x2f2ec9d3
 800380c:	b2d72f34 	.word	0xb2d72f34
 8003810:	3638ef1b 	.word	0x3638ef1b
 8003814:	b9500d01 	.word	0xb9500d01
 8003818:	3c088889 	.word	0x3c088889
 800381c:	be2aaaab 	.word	0xbe2aaaab
 8003820:	3e2aaaab 	.word	0x3e2aaaab

08003824 <fabsf>:
 8003824:	ee10 3a10 	vmov	r3, s0
 8003828:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800382c:	ee00 3a10 	vmov	s0, r3
 8003830:	4770      	bx	lr
	...

08003834 <floorf>:
 8003834:	ee10 3a10 	vmov	r3, s0
 8003838:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800383c:	3a7f      	subs	r2, #127	; 0x7f
 800383e:	2a16      	cmp	r2, #22
 8003840:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003844:	dc2a      	bgt.n	800389c <floorf+0x68>
 8003846:	2a00      	cmp	r2, #0
 8003848:	da11      	bge.n	800386e <floorf+0x3a>
 800384a:	eddf 7a18 	vldr	s15, [pc, #96]	; 80038ac <floorf+0x78>
 800384e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003852:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800385a:	dd05      	ble.n	8003868 <floorf+0x34>
 800385c:	2b00      	cmp	r3, #0
 800385e:	da23      	bge.n	80038a8 <floorf+0x74>
 8003860:	4a13      	ldr	r2, [pc, #76]	; (80038b0 <floorf+0x7c>)
 8003862:	2900      	cmp	r1, #0
 8003864:	bf18      	it	ne
 8003866:	4613      	movne	r3, r2
 8003868:	ee00 3a10 	vmov	s0, r3
 800386c:	4770      	bx	lr
 800386e:	4911      	ldr	r1, [pc, #68]	; (80038b4 <floorf+0x80>)
 8003870:	4111      	asrs	r1, r2
 8003872:	420b      	tst	r3, r1
 8003874:	d0fa      	beq.n	800386c <floorf+0x38>
 8003876:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80038ac <floorf+0x78>
 800387a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800387e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003886:	ddef      	ble.n	8003868 <floorf+0x34>
 8003888:	2b00      	cmp	r3, #0
 800388a:	bfbe      	ittt	lt
 800388c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8003890:	fa40 f202 	asrlt.w	r2, r0, r2
 8003894:	189b      	addlt	r3, r3, r2
 8003896:	ea23 0301 	bic.w	r3, r3, r1
 800389a:	e7e5      	b.n	8003868 <floorf+0x34>
 800389c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80038a0:	d3e4      	bcc.n	800386c <floorf+0x38>
 80038a2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80038a6:	4770      	bx	lr
 80038a8:	2300      	movs	r3, #0
 80038aa:	e7dd      	b.n	8003868 <floorf+0x34>
 80038ac:	7149f2ca 	.word	0x7149f2ca
 80038b0:	bf800000 	.word	0xbf800000
 80038b4:	007fffff 	.word	0x007fffff

080038b8 <scalbnf>:
 80038b8:	ee10 3a10 	vmov	r3, s0
 80038bc:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80038c0:	d025      	beq.n	800390e <scalbnf+0x56>
 80038c2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80038c6:	d302      	bcc.n	80038ce <scalbnf+0x16>
 80038c8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80038cc:	4770      	bx	lr
 80038ce:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80038d2:	d122      	bne.n	800391a <scalbnf+0x62>
 80038d4:	4b2a      	ldr	r3, [pc, #168]	; (8003980 <scalbnf+0xc8>)
 80038d6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8003984 <scalbnf+0xcc>
 80038da:	4298      	cmp	r0, r3
 80038dc:	ee20 0a27 	vmul.f32	s0, s0, s15
 80038e0:	db16      	blt.n	8003910 <scalbnf+0x58>
 80038e2:	ee10 3a10 	vmov	r3, s0
 80038e6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80038ea:	3a19      	subs	r2, #25
 80038ec:	4402      	add	r2, r0
 80038ee:	2afe      	cmp	r2, #254	; 0xfe
 80038f0:	dd15      	ble.n	800391e <scalbnf+0x66>
 80038f2:	ee10 3a10 	vmov	r3, s0
 80038f6:	eddf 7a24 	vldr	s15, [pc, #144]	; 8003988 <scalbnf+0xd0>
 80038fa:	eddf 6a24 	vldr	s13, [pc, #144]	; 800398c <scalbnf+0xd4>
 80038fe:	2b00      	cmp	r3, #0
 8003900:	eeb0 7a67 	vmov.f32	s14, s15
 8003904:	bfb8      	it	lt
 8003906:	eef0 7a66 	vmovlt.f32	s15, s13
 800390a:	ee27 0a27 	vmul.f32	s0, s14, s15
 800390e:	4770      	bx	lr
 8003910:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8003990 <scalbnf+0xd8>
 8003914:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003918:	4770      	bx	lr
 800391a:	0dd2      	lsrs	r2, r2, #23
 800391c:	e7e6      	b.n	80038ec <scalbnf+0x34>
 800391e:	2a00      	cmp	r2, #0
 8003920:	dd06      	ble.n	8003930 <scalbnf+0x78>
 8003922:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003926:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800392a:	ee00 3a10 	vmov	s0, r3
 800392e:	4770      	bx	lr
 8003930:	f112 0f16 	cmn.w	r2, #22
 8003934:	da1a      	bge.n	800396c <scalbnf+0xb4>
 8003936:	f24c 3350 	movw	r3, #50000	; 0xc350
 800393a:	4298      	cmp	r0, r3
 800393c:	ee10 3a10 	vmov	r3, s0
 8003940:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003944:	dd0a      	ble.n	800395c <scalbnf+0xa4>
 8003946:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8003988 <scalbnf+0xd0>
 800394a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800398c <scalbnf+0xd4>
 800394e:	eef0 7a40 	vmov.f32	s15, s0
 8003952:	2b00      	cmp	r3, #0
 8003954:	bf18      	it	ne
 8003956:	eeb0 0a47 	vmovne.f32	s0, s14
 800395a:	e7db      	b.n	8003914 <scalbnf+0x5c>
 800395c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8003990 <scalbnf+0xd8>
 8003960:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003994 <scalbnf+0xdc>
 8003964:	eef0 7a40 	vmov.f32	s15, s0
 8003968:	2b00      	cmp	r3, #0
 800396a:	e7f3      	b.n	8003954 <scalbnf+0x9c>
 800396c:	3219      	adds	r2, #25
 800396e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003972:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8003976:	eddf 7a08 	vldr	s15, [pc, #32]	; 8003998 <scalbnf+0xe0>
 800397a:	ee07 3a10 	vmov	s14, r3
 800397e:	e7c4      	b.n	800390a <scalbnf+0x52>
 8003980:	ffff3cb0 	.word	0xffff3cb0
 8003984:	4c000000 	.word	0x4c000000
 8003988:	7149f2ca 	.word	0x7149f2ca
 800398c:	f149f2ca 	.word	0xf149f2ca
 8003990:	0da24260 	.word	0x0da24260
 8003994:	8da24260 	.word	0x8da24260
 8003998:	33000000 	.word	0x33000000

0800399c <__libc_init_array>:
 800399c:	b570      	push	{r4, r5, r6, lr}
 800399e:	4d0d      	ldr	r5, [pc, #52]	; (80039d4 <__libc_init_array+0x38>)
 80039a0:	4c0d      	ldr	r4, [pc, #52]	; (80039d8 <__libc_init_array+0x3c>)
 80039a2:	1b64      	subs	r4, r4, r5
 80039a4:	10a4      	asrs	r4, r4, #2
 80039a6:	2600      	movs	r6, #0
 80039a8:	42a6      	cmp	r6, r4
 80039aa:	d109      	bne.n	80039c0 <__libc_init_array+0x24>
 80039ac:	4d0b      	ldr	r5, [pc, #44]	; (80039dc <__libc_init_array+0x40>)
 80039ae:	4c0c      	ldr	r4, [pc, #48]	; (80039e0 <__libc_init_array+0x44>)
 80039b0:	f000 f820 	bl	80039f4 <_init>
 80039b4:	1b64      	subs	r4, r4, r5
 80039b6:	10a4      	asrs	r4, r4, #2
 80039b8:	2600      	movs	r6, #0
 80039ba:	42a6      	cmp	r6, r4
 80039bc:	d105      	bne.n	80039ca <__libc_init_array+0x2e>
 80039be:	bd70      	pop	{r4, r5, r6, pc}
 80039c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80039c4:	4798      	blx	r3
 80039c6:	3601      	adds	r6, #1
 80039c8:	e7ee      	b.n	80039a8 <__libc_init_array+0xc>
 80039ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80039ce:	4798      	blx	r3
 80039d0:	3601      	adds	r6, #1
 80039d2:	e7f2      	b.n	80039ba <__libc_init_array+0x1e>
 80039d4:	08003dec 	.word	0x08003dec
 80039d8:	08003dec 	.word	0x08003dec
 80039dc:	08003dec 	.word	0x08003dec
 80039e0:	08003df4 	.word	0x08003df4

080039e4 <memset>:
 80039e4:	4402      	add	r2, r0
 80039e6:	4603      	mov	r3, r0
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d100      	bne.n	80039ee <memset+0xa>
 80039ec:	4770      	bx	lr
 80039ee:	f803 1b01 	strb.w	r1, [r3], #1
 80039f2:	e7f9      	b.n	80039e8 <memset+0x4>

080039f4 <_init>:
 80039f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039f6:	bf00      	nop
 80039f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039fa:	bc08      	pop	{r3}
 80039fc:	469e      	mov	lr, r3
 80039fe:	4770      	bx	lr

08003a00 <_fini>:
 8003a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a02:	bf00      	nop
 8003a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a06:	bc08      	pop	{r3}
 8003a08:	469e      	mov	lr, r3
 8003a0a:	4770      	bx	lr
